package com.bochat.app.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bochat.app.model.bean.GroupEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_group".
*/
public class GroupEntityDao extends AbstractDao<GroupEntity, Long> {

    public static final String TABLENAME = "table_group";

    /**
     * Properties of entity GroupEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Group_id = new Property(0, long.class, "group_id", true, "_id");
        public final static Property Create_time = new Property(1, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Group_head = new Property(2, String.class, "group_head", false, "GROUP_HEAD");
        public final static Property Group_introduce = new Property(3, String.class, "group_introduce", false, "GROUP_INTRODUCE");
        public final static Property Group_label = new Property(4, String.class, "group_label", false, "GROUP_LABEL");
        public final static Property Group_level = new Property(5, String.class, "group_level", false, "GROUP_LEVEL");
        public final static Property Group_name = new Property(6, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Level_num = new Property(7, String.class, "level_num", false, "LEVEL_NUM");
        public final static Property People = new Property(8, int.class, "people", false, "PEOPLE");
        public final static Property Member_num = new Property(9, int.class, "member_num", false, "MEMBER_NUM");
        public final static Property Role = new Property(10, int.class, "role", false, "ROLE");
        public final static Property JoinMethod = new Property(11, int.class, "joinMethod", false, "JOIN_METHOD");
    };

    private DaoSession daoSession;


    public GroupEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_group\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: group_id
                "\"CREATE_TIME\" TEXT," + // 1: create_time
                "\"GROUP_HEAD\" TEXT," + // 2: group_head
                "\"GROUP_INTRODUCE\" TEXT," + // 3: group_introduce
                "\"GROUP_LABEL\" TEXT," + // 4: group_label
                "\"GROUP_LEVEL\" TEXT," + // 5: group_level
                "\"GROUP_NAME\" TEXT," + // 6: group_name
                "\"LEVEL_NUM\" TEXT," + // 7: level_num
                "\"PEOPLE\" INTEGER NOT NULL ," + // 8: people
                "\"MEMBER_NUM\" INTEGER NOT NULL ," + // 9: member_num
                "\"ROLE\" INTEGER NOT NULL ," + // 10: role
                "\"JOIN_METHOD\" INTEGER NOT NULL );"); // 11: joinMethod
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_group\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGroup_id());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(2, create_time);
        }
 
        String group_head = entity.getGroup_head();
        if (group_head != null) {
            stmt.bindString(3, group_head);
        }
 
        String group_introduce = entity.getGroup_introduce();
        if (group_introduce != null) {
            stmt.bindString(4, group_introduce);
        }
 
        String group_label = entity.getGroup_label();
        if (group_label != null) {
            stmt.bindString(5, group_label);
        }
 
        String group_level = entity.getGroup_level();
        if (group_level != null) {
            stmt.bindString(6, group_level);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(7, group_name);
        }
 
        String level_num = entity.getLevel_num();
        if (level_num != null) {
            stmt.bindString(8, level_num);
        }
        stmt.bindLong(9, entity.getPeople());
        stmt.bindLong(10, entity.getMember_num());
        stmt.bindLong(11, entity.getRole());
        stmt.bindLong(12, entity.getJoinMethod());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGroup_id());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(2, create_time);
        }
 
        String group_head = entity.getGroup_head();
        if (group_head != null) {
            stmt.bindString(3, group_head);
        }
 
        String group_introduce = entity.getGroup_introduce();
        if (group_introduce != null) {
            stmt.bindString(4, group_introduce);
        }
 
        String group_label = entity.getGroup_label();
        if (group_label != null) {
            stmt.bindString(5, group_label);
        }
 
        String group_level = entity.getGroup_level();
        if (group_level != null) {
            stmt.bindString(6, group_level);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(7, group_name);
        }
 
        String level_num = entity.getLevel_num();
        if (level_num != null) {
            stmt.bindString(8, level_num);
        }
        stmt.bindLong(9, entity.getPeople());
        stmt.bindLong(10, entity.getMember_num());
        stmt.bindLong(11, entity.getRole());
        stmt.bindLong(12, entity.getJoinMethod());
    }

    @Override
    protected final void attachEntity(GroupEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GroupEntity readEntity(Cursor cursor, int offset) {
        GroupEntity entity = new GroupEntity( //
            cursor.getLong(offset + 0), // group_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // create_time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_head
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // group_introduce
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // group_label
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // group_level
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // group_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // level_num
            cursor.getInt(offset + 8), // people
            cursor.getInt(offset + 9), // member_num
            cursor.getInt(offset + 10), // role
            cursor.getInt(offset + 11) // joinMethod
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupEntity entity, int offset) {
        entity.setGroup_id(cursor.getLong(offset + 0));
        entity.setCreate_time(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroup_head(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroup_introduce(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroup_label(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroup_level(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroup_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLevel_num(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPeople(cursor.getInt(offset + 8));
        entity.setMember_num(cursor.getInt(offset + 9));
        entity.setRole(cursor.getInt(offset + 10));
        entity.setJoinMethod(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupEntity entity, long rowId) {
        entity.setGroup_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupEntity entity) {
        if(entity != null) {
            return entity.getGroup_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
