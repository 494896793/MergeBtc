package com.bochat.app.app.activity;

import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;

import com.alibaba.android.arouter.facade.annotation.Route;
import com.bochat.app.R;
import com.bochat.app.app.RouteTable;
import com.bochat.app.common.contract.conversation.GroupMemberContract;
import com.bochat.app.model.bean.GroupMemberEntity;
import com.bochat.app.mvp.view.BaseActivity;
import com.bumptech.glide.Glide;
import com.zhy.adapter.abslistview.MultiItemTypeAdapter;
import com.zhy.adapter.abslistview.ViewHolder;
import com.zhy.adapter.abslistview.base.ItemViewDelegate;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import butterknife.BindView;
import butterknife.OnClick;

/**
 * Author      : FJ
 * CreateDate  : 2019/04/25 17:44
 * Description :
 */
@Route(path = RouteTable.CONVERSATION_GROUP_MEMBER)
public class GroupMemberActivity extends BaseActivity<GroupMemberContract.Presenter> implements GroupMemberContract.View{

    @Inject
    GroupMemberContract.Presenter presenter;
    
    @BindView(R.id.cv_group_member_list)
    ListView listView;

    List<GroupMemberEntity> members;

    MultiItemTypeAdapter<GroupMemberEntity> adapter;
    
    @Override
    protected void initInjector() {
        getActivityComponent().inject(this);
    }

    @Override
    protected GroupMemberContract.Presenter initPresenter() {
        return presenter;
    }

    @Override
    protected void setRootView(Bundle savedInstanceState) {
        setContentView(R.layout.activity_cv_group_member);
    }

    @Override
    protected void initWidget() {
        members = new ArrayList<>();
     
        adapter = new MultiItemTypeAdapter<>(this, members);

        adapter.addItemViewDelegate(new ItemViewDelegate<GroupMemberEntity>() {
            @Override
            public int getItemViewLayoutId() {
                return R.layout.item_cv_group_member;
            }

            @Override
            public boolean isForViewType(GroupMemberEntity item, int position) {
                return item.getRole() == 1;
            }

            @Override
            public void convert(ViewHolder holder, GroupMemberEntity groupMemberEntity, int position) {
                ImageView icon = holder.getView(R.id.cv_group_member_icon);
                Glide.with(GroupMemberActivity.this).load(groupMemberEntity.getHead_img()).into(icon);
                holder.setText(R.id.cv_group_member_name, groupMemberEntity.getNickname());
            }
        });
        adapter.addItemViewDelegate(new ItemViewDelegate<GroupMemberEntity>() {
            @Override
            public int getItemViewLayoutId() {
                return R.layout.item_cv_group_manager;
            }

            @Override
            public boolean isForViewType(GroupMemberEntity item, int position) {
                return item.getRole() == 2;
            }

            @Override
            public void convert(ViewHolder holder, GroupMemberEntity groupMemberEntity, int position) {
                ImageView icon = holder.getView(R.id.cv_group_member_icon);
                Glide.with(GroupMemberActivity.this).load(groupMemberEntity.getHead_img()).into(icon);
                holder.setText(R.id.cv_group_member_name, groupMemberEntity.getNickname());
            }
        });
        adapter.addItemViewDelegate(new ItemViewDelegate<GroupMemberEntity>() {
            @Override
            public int getItemViewLayoutId() {
                return R.layout.item_cv_group_owner;
            }

            @Override
            public boolean isForViewType(GroupMemberEntity item, int position) {
                return item.getRole() == 3;
            }

            @Override
            public void convert(ViewHolder holder, GroupMemberEntity groupMemberEntity, int position) {
                ImageView icon = holder.getView(R.id.cv_group_member_icon);
                Glide.with(GroupMemberActivity.this).load(groupMemberEntity.getHead_img()).into(icon);
                holder.setText(R.id.cv_group_member_name, groupMemberEntity.getNickname());
            }
        });
        adapter.addItemViewDelegate(new ItemViewDelegate<GroupMemberEntity>() {
            @Override
            public int getItemViewLayoutId() {
                return R.layout.item_cv_group_div;
            }

            @Override
            public boolean isForViewType(GroupMemberEntity item, int position) {
                return item.getRole() == 4;
            }

            @Override
            public void convert(ViewHolder holder, GroupMemberEntity groupMemberEntity, int position) {
                holder.setText(R.id.cv_group_member_div_text, groupMemberEntity.getNickname());
            }
        });
        listView.setAdapter(adapter);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (members.get(position).getRole() != 4) {
                    presenter.onItemClick(members.get(position));
                }
            }
        });
    }
    
    @OnClick({R.id.cv_group_member_search_layout})
    @Override
    protected void onViewClicked(View view) {
        super.onViewClicked(view);
        presenter.onSearchClick();
    }

    @Override
    public void updateMemberList(List<GroupMemberEntity> members2) {
        members.clear();
        members.addAll(members2);
        adapter.notifyDataSetChanged();
    }
}
