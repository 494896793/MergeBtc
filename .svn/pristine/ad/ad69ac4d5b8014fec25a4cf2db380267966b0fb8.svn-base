package com.bochat.app.app.fragment.dynamic;

import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.bochat.app.R;
import com.bochat.app.app.adapter.MarketQuotationOptionalAdapter;
import com.bochat.app.business.cache.CachePool;
import com.bochat.app.common.router.Router;
import com.bochat.app.common.router.RouterMarketQuotationDetail;
import com.bochat.app.common.util.ULog;
import com.bochat.app.model.bean.DynamicMQEntity;
import com.bochat.app.model.bean.MarketInfoEntity;
import com.bochat.app.model.bean.MarketInfoListEntity;
import com.bochat.app.model.bean.UserEntity;
import com.bochat.app.model.modelImpl.MarketCenter.TransactionEntity;
import com.bochat.app.model.modelImpl.MarketCenter.TransactionListEntity;
import com.bochat.app.mvp.view.BaseFragment;
import com.bochat.app.common.contract.dynamic.MarketQuotationOptionalContract;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import butterknife.BindView;

public class MarketQuotationOptionalFragment extends BaseFragment<MarketQuotationOptionalContract.Presenter> implements MarketQuotationOptionalContract.View,
        MarketQuotationOptionalAdapter.OnMarketQuotationHeaderClickListener,
        MarketQuotationOptionalAdapter.OnMarketQuotationItemClickListener {

    @Inject
    MarketQuotationOptionalContract.Presenter presenter;

    @BindView(R.id.quotation_optional_list)
    RecyclerView mOptionalListView;

    @BindView(R.id.quotation_no_data)
    ImageView mOptionalNotData;

    private MarketQuotationOptionalAdapter mAdapter;

    boolean isNotData = true;
    private String mType;
    private String mUserId;

    private View lastSortClickView;

    @Override
    protected void initInjector() {
        getFragmentComponent().inject(this);
    }

    @Override
    protected MarketQuotationOptionalContract.Presenter initPresenter() {
        return presenter;
    }

    @Override
    protected View getRootView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_market_quotation_optional, container, false);
    }

    public void setType(String type) {
        mType = type;
    }

    public String getType() {
        return mType;
    }

    public String getUserId() {
        return mUserId;
    }

    public void setUserId(String userId) {
        mUserId = userId;
    }

    @Override
    protected void initWidget() {
        super.initWidget();

        presenter.getData();

        mOptionalListView.setLayoutManager(new LinearLayoutManager(getViewContext()));
        mOptionalListView.setItemAnimator(new DefaultItemAnimator());

        mAdapter = new MarketQuotationOptionalAdapter(getViewContext());
        mOptionalListView.setAdapter(mAdapter);

        mAdapter.setMarketQuotationHeaderClickListener(this);
        mAdapter.setOnMarketQuotationItemClickListener(this);

        View headerView = LayoutInflater.from(getViewContext()).inflate(R.layout.market_quotation_optional_header_view, null);
        mAdapter.setHeaderView(headerView);
        presenter.obtainTransactionEntity(getUserId(), getType(), "defaul");

    }

    public void setNoData(boolean noData) {
        mOptionalNotData.setVisibility(noData ? View.VISIBLE : View.GONE);
    }

    @Override
    public void onItemClick(View view, TransactionEntity entity) {
        RouterMarketQuotationDetail router = new RouterMarketQuotationDetail();
        router.setEntity(entity);
        Router.navigation(router);
    }


    @Override
    public void onClickSort() {
        presenter.obtainTransactionEntity(getUserId(), getType(), "defaul");
    }

    @Override
    public void onClickNewPrice() {
        presenter.obtainTransactionEntity(getUserId(), getType(), "priceDesc");
    }

    @Override
    public void onClickUpAndDown() {
        presenter.obtainTransactionEntity(getUserId(), getType(), "upAndLowDesc");
    }

    @Override
    public void updateTransactionList(final TransactionListEntity entity) {
        if (mAdapter != null)
            mOptionalListView.post(new Runnable() {
                @Override
                public void run() {
                    if (entity.getList().size() > 0) {
                        setNoData(false);
                        mAdapter.notifyData(entity.getList());
                    } else {
                        setNoData(true);
                        mAdapter.notifyNotData();
                    }
                }
            });

    }
}
