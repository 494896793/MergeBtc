package com.bochat.app.business.main.bill;


import android.content.Intent;

import com.alibaba.android.arouter.launcher.ARouter;
import com.bochat.app.app.RouteExtra;
import com.bochat.app.app.RouteTable;
import com.bochat.app.business.RxErrorConsumer;
import com.bochat.app.business.RxErrorThrowable;
import com.bochat.app.common.contract.bill.QuickExchangeHallContract;
import com.bochat.app.common.model.ISpeedConverModel;
import com.bochat.app.model.bean.SpeedConverListEntity;
import com.bochat.app.model.bean.SpeedConverListItemEntity;
import com.bochat.app.model.bean.UserCurrencyDataEntity;
import com.bochat.app.mvp.presenter.BasePresenter;

import javax.inject.Inject;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;

/**
 *
 */
public class QuickExchangeHallPresenter extends BasePresenter<QuickExchangeHallContract.View> implements QuickExchangeHallContract.Presenter {
    
    @Inject
    ISpeedConverModel speedConverModel;
    
    private UserCurrencyDataEntity userCurrencyDataEntity;
    
    @Override
    public void initInjector() {
        getBusinessComponent().inject(this);
    }

    @Override
    public void onViewRefresh() {
        super.onViewRefresh();

        Intent viewIntent = getView().getViewIntent();
        if (viewIntent.hasExtra(RouteExtra.UserCurrencyDataEntity)) {
            userCurrencyDataEntity = (UserCurrencyDataEntity) viewIntent.getSerializableExtra(RouteExtra.UserCurrencyDataEntity);
        }
        
        Disposable subscribe = Observable.create(new ObservableOnSubscribe<SpeedConverListEntity>() {
            @Override
            public void subscribe(ObservableEmitter<SpeedConverListEntity> emitter) throws Exception {
                try {
                    SpeedConverListEntity entity = speedConverModel.speedConverList(1, String.valueOf(10));
                    if(entity.getRetcode() != 0){
                        emitter.onError(new RxErrorThrowable(entity));
                        return;
                    }
                    emitter.onNext(entity);
                    emitter.onComplete();
                } catch (Exception e) {
                    emitter.onError(e);
                    e.printStackTrace();
                }
            }
        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer<SpeedConverListEntity>() {
            @Override
            public void accept(SpeedConverListEntity entity) throws Exception {
                getView().hideLoading("");
                getView().updateList(entity);
            }
        }, new RxErrorConsumer<Throwable>(this)  {
            @Override
            public void acceptError(Throwable object) {
                getView().hideLoading("");
            }
        });
        getView().showLoading(subscribe);
    }

    @Override
    public void onItemClick(SpeedConverListItemEntity item) {
        ARouter.getInstance().build(RouteTable.MINE_QUICK_EXCHANGE_DETAIL)
                .withSerializable(RouteExtra.SpeedConverListItemEntity, item).navigation();
    }

    @Override
    public void onEnterClick() {
        if(userCurrencyDataEntity != null && !userCurrencyDataEntity.isEmpty()){
            ARouter.getInstance().build(RouteTable.MINE_QUICK_EXCHANGE)
                    .withSerializable(RouteExtra.UserCurrencyDataEntity, userCurrencyDataEntity).navigation();
        } else {
            ARouter.getInstance().build(RouteTable.MINE_QUICK_EXCHANGE).navigation();
        }
    }

    @Override
    public void onOrderListClick() {
        ARouter.getInstance().build(RouteTable.MINE_ORDER_LIST).navigation();
    }
}
