package com.bochat.app.app.fragment.dynamic;

import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.bochat.app.R;
import com.bochat.app.app.adapter.MarketQuotationBSAdapter;
import com.bochat.app.app.util.DecimalFormatter;
import com.bochat.app.app.util.MoneyInputLimit;
import com.bochat.app.common.contract.dynamic.MarketQuotationBuyAndSellContract;
import com.bochat.app.common.util.NumberUtil;
import com.bochat.app.model.bean.ResidueAmountListEntity;
import com.bochat.app.model.bean.TradingRulesEntity;
import com.bochat.app.model.event.MarketQuotationEvent;
import com.bochat.app.model.modelImpl.MarketCenter.EntrustEntity;
import com.bochat.app.model.modelImpl.MarketCenter.EntrustListEntity;
import com.bochat.app.model.modelImpl.MarketCenter.TransactionEntity;
import com.bochat.app.mvp.view.BaseFragment;
import com.bochat.app.mvp.view.ResultTipsType;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import butterknife.BindView;
import butterknife.OnClick;

public class MarketQuotationBuyAndSellFragment extends BaseFragment<MarketQuotationBuyAndSellContract.Presenter> implements
        MarketQuotationBuyAndSellContract.View,
        RadioGroup.OnCheckedChangeListener {

    private static final String DEFAULT_NUM = "0.00000000";

    @Inject
    MarketQuotationBuyAndSellContract.Presenter presenter;

    /**
     * 百分比
     */
    @BindView(R.id.dynamic_buy_radio_group)
    RadioGroup mDynamicRadioGroup;

    /**
     * 卖出列表
     */
    @BindView(R.id.dynamic_right_bs_list_sell)
    RecyclerView mDynamicSellRecyclerView;

    /**
     * 买入列表
     */
    @BindView(R.id.dynamic_right_bs_list_buy)
    RecyclerView mDynamicBuyRecyclerView;

    /**
     * 点击买入或卖出
     */
    @BindView(R.id.dynamic_buy_or_sell_btn)
    Button mDynamicSellButton;

    /**
     * 买入或卖出单价
     */
    @BindView(R.id.dynamic_bs_price_edit)
    EditText mDynamicBSPriceEdit;

    /**
     * 买入或卖出单价右侧币种
     */
    @BindView(R.id.dynamic_bs_price_edit_right)
    TextView mDynamicBSPriceEditRight;

    /**
     * 买入或卖出数量
     */
    @BindView(R.id.dynamic_bs_count_edit)
    EditText mDynamicBSCountEdit;

    /**
     * 买入或卖出数量右侧币种
     */
    @BindView(R.id.dynamic_bs_count_edit_right)
    TextView mDynamicBSCountEditLeft;

    /**
     * 预计交易额
     */
    @BindView(R.id.dynamic_expected_turnover_result)
    TextView mDynamicExpectedTurnoverResult;

    @BindView(R.id.dynamic_balance_currentR_left_txt)
    TextView mDynamicBalanceCurrentRLText;

    /**
     * 右侧币种资金
     */
    @BindView(R.id.dynamic_balance_currentR_right_txt)
    TextView mDynamicBalanceCurrentR;

    /**
     * 左侧币种资金显示币种名称
     */
    @BindView(R.id.dynamic_balance_currentL_left_txt)
    TextView mDynamicBalanceCurrentLLText;

    /**
     * 左侧币种资金
     */
    @BindView(R.id.dynamic_balance_currentL_right_txt)
    TextView mDynamicBalanceCurrentL;

    /**
     * 可买数量显示
     */
    @BindView(R.id.dynamic_can_buy_text)
    TextView mDynamicCanBuyText;

    @BindView(R.id.dynamic_bs_right_entrust_count)
    TextView mDynamicREntrustCount;

    @BindView(R.id.dynamic_bs_right_entrust_cny_price)
    TextView mDynamicREntrustCnyPrice;

    /**
     * 是否卖出或买入标记
     */
    private boolean isSell = false;

    /**
     * 传入类型
     */
    private String mType;

    /**
     * 格式化
     */
    private String mDecimalFormat = "###,###" + DEFAULT_NUM;

    /**
     * 记录百分比
     */
    private double mPercent = 1.0;

    /**
     * 记录可买或可卖出数量
     */
    private double mCanBuyOrSellCount = 0.00000000;

    private TradingRulesEntity mTradingRulesEntity;
    /**
     * 传入实体
     */
    private TransactionEntity mEntity;

    private MarketQuotationBSAdapter mBuyAdapter;
    private MarketQuotationBSAdapter mSellAdapter;

    private List<EntrustEntity> buyerDefaultEntities;
    private List<EntrustEntity> sellerDefaultEntities;

    @Override
    protected void initWidget() {
        super.initWidget();

        mDynamicBSPriceEdit.setHint(isSell ? getString(R.string.market_quotation_bs_price, "卖出") : getString(R.string.market_quotation_bs_price, "买入"));
        mDynamicBSCountEdit.setHint(isSell ? getString(R.string.market_quotation_bs_count, "卖出") : getString(R.string.market_quotation_bs_count, "买入"));
        mDynamicSellButton.setText(isSell ? "卖出" : "买入");
        mDynamicSellButton.setBackgroundColor(getViewContext().getResources().getColor(isSell ? R.color.quotation_green : R.color.quotation_red_s));

        if (mEntity != null) {

            mDynamicBSPriceEditRight.setText(mEntity.getSellerName());
            mDynamicBSCountEditLeft.setText(mEntity.getBuyerName());

            mDynamicBalanceCurrentRLText.setText(getViewContext().getResources().getString(R.string.market_quotation_blance_left_fmt, mEntity.getSellerName()));
            mDynamicBalanceCurrentLLText.setText(getViewContext().getResources().getString(R.string.market_quotation_blance_left_fmt, mEntity.getBuyerName()));

            mDynamicExpectedTurnoverResult.setText(getViewContext().getString(R.string.market_quotation_expected_turnover_result, DEFAULT_NUM, mEntity.getSellerName()));
            mDynamicCanBuyText.setText(getViewContext().getString(R.string.market_quotation_can_bs_fmt, mEntity.getBuyerName(), DEFAULT_NUM));

        }

        mDynamicRadioGroup.setOnCheckedChangeListener(this);


        mDynamicBSPriceEdit.addTextChangedListener(new MoneyInputLimit(mDynamicBSPriceEdit).setDigits(4));
        mDynamicBSPriceEdit.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                double dSellerPrice = 0;

                String sPrice = mDynamicBSPriceEdit.getText().toString();
                String sBalance = mDynamicBalanceCurrentL.getText().toString();

                String buyerName = mEntity.getBuyerName();

                mDynamicBSCountEdit.setText("");

                if (!TextUtils.isEmpty(sBalance)) {
                    double dResidue = NumberUtil.parseDouble(sBalance);
                    if (dResidue > 0 && !TextUtils.isEmpty(sPrice)) {
                        dSellerPrice = NumberUtil.parseDouble(sPrice);
                        if (dSellerPrice > dResidue) {
                            showTips(new ResultTipsType("超出可用资产", false));
                        } else {
                            if (dSellerPrice > 0) {
                                mCanBuyOrSellCount = (dResidue / dSellerPrice);
                            } else {
                                mCanBuyOrSellCount = 0.00000000;
                            }
                            mDynamicCanBuyText.setText(getViewContext().getString(R.string.market_quotation_can_bs_fmt, buyerName,
                                    DecimalFormatter.newInstance().format(mDecimalFormat, mCanBuyOrSellCount)));
                        }

                    } else {
                        mCanBuyOrSellCount = 0.00000000;
                        mDynamicCanBuyText.setText(getViewContext().getString(R.string.market_quotation_can_bs_fmt, buyerName,
                                DecimalFormatter.newInstance().format(mDecimalFormat, mCanBuyOrSellCount)));
                    }
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        mDynamicBSCountEdit.addTextChangedListener(new MoneyInputLimit(mDynamicBSCountEdit).setDigits(4));
        mDynamicBSCountEdit.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

                String sCount = mDynamicBSCountEdit.getText().toString();
                String sPrice = mDynamicBSPriceEdit.getText().toString();

                if (!TextUtils.isEmpty(sCount) && !sCount.equals("")) {

                    double dCount = NumberUtil.parseDouble(sCount);

                    if (dCount > 0 && !TextUtils.isEmpty(sPrice)) {
                        double dPrice = NumberUtil.parseDouble(sPrice);
                        if (dCount > mCanBuyOrSellCount) {
                            showTips(new ResultTipsType("不能超过可买数量", false));
                            mDynamicBSCountEdit.setText("");
                        } else {
                            mDynamicExpectedTurnoverResult.setText(getViewContext().getString(R.string.market_quotation_expected_turnover_result,
                                    String.valueOf(DecimalFormatter.newInstance().format(mDecimalFormat, dPrice * dCount)),
                                    mEntity.getSellerName()));
                        }

                    } else if (dCount != 0)
                        mDynamicBSCountEdit.setText("0");
                } else {
                    mDynamicRadioGroup.clearCheck();
                    mDynamicExpectedTurnoverResult.setText(getViewContext().getString(R.string.market_quotation_expected_turnover_result,
                            DEFAULT_NUM,
                            mEntity.getSellerName()));
                }

            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });

        LinearLayoutManager reverseLayoutManager = new LinearLayoutManager(getViewContext());
        reverseLayoutManager.setReverseLayout(true);
        LinearLayoutManager normalLayoutManager = new LinearLayoutManager(getViewContext());

        buyerDefaultEntities = new ArrayList<>();
        sellerDefaultEntities = new ArrayList<>();

        for (int i = 0; i < 10; i++) {
            try {
                EntrustEntity entrustEntity = new EntrustEntity(new JSONObject("{}"));
                buyerDefaultEntities.add(entrustEntity);
                sellerDefaultEntities.add(entrustEntity);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        mBuyAdapter = new MarketQuotationBSAdapter(getViewContext(), false);
        mSellAdapter = new MarketQuotationBSAdapter(getViewContext(), true);

        mDynamicSellRecyclerView.setItemAnimator(new DefaultItemAnimator());
        mDynamicSellRecyclerView.setLayoutManager(reverseLayoutManager);
        mDynamicSellRecyclerView.setAdapter(mSellAdapter);

        mDynamicBuyRecyclerView.setItemAnimator(new DefaultItemAnimator());
        mDynamicBuyRecyclerView.setLayoutManager(normalLayoutManager);
        mDynamicBuyRecyclerView.setAdapter(mBuyAdapter);

        mBuyAdapter.notifyData(buyerDefaultEntities);
        mSellAdapter.notifyData(sellerDefaultEntities);


    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EventBus.getDefault().register(this);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }
    @Subscribe
    public void onMessage(MarketQuotationEvent event) {
        mEntity = event.getEntity();
        initWidget();
        presenter.update(mEntity);
    }


    public void setType(String type) {
        mType = type;
    }

    public void setEntity(TransactionEntity entity) {
        mEntity = entity;
    }

    public void isSell(boolean sell) {
        isSell = sell;
    }

    public void sendMessage() {
        presenter.obtainEntrustList(mEntity.getMarketId(), mType);
    }

    @Override
    protected void initInjector() {
        getFragmentComponent().inject(this);
    }

    @Override
    protected MarketQuotationBuyAndSellContract.Presenter initPresenter() {
        return presenter;
    }

    @Override
    protected View getRootView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_market_quotation_buy_and_sell_layout, container, false);
    }

    @Override
    public void afterResult() {

    }

    @Override
    public void getResidueAmount(ResidueAmountListEntity entity) {
        if (entity != null && entity.getData().size() > 0) {
            mDynamicBalanceCurrentR.setText(entity.getData().get(0).getResidue_amount());
            mDynamicBalanceCurrentL.setText(entity.getData().get(1).getResidue_amount());
        }
    }

    @Override
    public void updateEntrustList(final EntrustListEntity entity) {
        mDynamicBuyRecyclerView.post(new Runnable() {
            @Override
            public void run() {
                mDynamicREntrustCount.setText(getString(R.string.cny_price_fmt,
                        String.valueOf(DecimalFormatter.newInstance()
                                .format("###,###0.00000000",
                                        entity.getMakePrice())),
                        mEntity.getSellerName()));
                mDynamicREntrustCnyPrice.setText(getString(R.string.market_quotation_exchange_fmt, String.valueOf(entity.getCnyPrice())));
                List<EntrustEntity> maxList = entity.getMaxList();
                List<EntrustEntity> minList = entity.getMinList();
                mBuyAdapter.notifyData(maxList.size() > 0 ? maxList : buyerDefaultEntities);
                mSellAdapter.notifyData(minList.size() > 0 ? minList : sellerDefaultEntities);
            }
        });
    }

    @Override
    public void getTradingRulesEntity(TradingRulesEntity entity) {
        mTradingRulesEntity = entity;
    }

    @Override
    public void saleSuccess() {
        showTips("委托成功");
    }

    private void calculateBuy(double percent) {

        mPercent = percent;
        if (mCanBuyOrSellCount > 0) {
            double count = mCanBuyOrSellCount * percent;
            mDynamicBSCountEdit.setText(DecimalFormatter.newInstance().format("###,###.00000000", count));
        } else {
            showTips(new ResultTipsType("请输入单价", false));
            mDynamicRadioGroup.clearCheck();
        }
    }

    @OnClick(R.id.dynamic_buy_or_sell_btn)
    @Override
    protected void onViewClicked(View view) {

        if (view.getId() == R.id.dynamic_buy_or_sell_btn) {
            String sPrice = mDynamicBSPriceEdit.getText().toString();
            String sCount = mDynamicBSCountEdit.getText().toString();
            if (!TextUtils.isEmpty(sPrice) && !TextUtils.isEmpty(sCount)) {

                double iCount = NumberUtil.parseDouble(sCount);

                if (sPrice.equals("0")) {
                    showTips(new ResultTipsType("单价不能为0", false));
                    return;
                }

                if (iCount == 0) {
                    showTips(new ResultTipsType("数量不能为0", false));
                    return;
                }

                long marketId = Long.valueOf(mEntity.getMarketId());
                long sellerId = Long.valueOf(mEntity.getSellerId());
                long buyerId = Long.valueOf(mEntity.getBuyerId());

                presenter.saleBuying(
                        marketId,
                        sPrice,
                        iCount,
                        isSell ? 1 : 0,
                        buyerId,
                        sellerId);
            } else {
                showTips(new ResultTipsType("请输入单价和数量", false));
            }
        }
    }

    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {
        switch (checkedId) {
            case R.id.percent_25:
                calculateBuy(0.25);
                break;
            case R.id.percent_50:
                calculateBuy(0.5);
                break;
            case R.id.percent_75:
                calculateBuy(0.75);
                break;
            case R.id.percent_100:
                calculateBuy(1);
                break;
        }
    }
}
