package com.bochat.app.business.main.conversation;

import android.content.Context;
import android.content.Intent;
import android.text.TextUtils;

import com.alibaba.android.arouter.launcher.ARouter;
import com.bochat.app.MainApplication;
import com.bochat.app.app.RouteExtra;
import com.bochat.app.app.RouteTable;
import com.bochat.app.business.RxErrorConsumer;
import com.bochat.app.business.RxErrorThrowable;
import com.bochat.app.business.cache.CachePool;
import com.bochat.app.common.contract.conversation.GroupManageEditContract;
import com.bochat.app.common.model.IGroupModule;
import com.bochat.app.common.model.IOSSModel;
import com.bochat.app.common.util.ConditionObject;
import com.bochat.app.model.bean.CodeEntity;
import com.bochat.app.model.bean.GroupEntity;
import com.bochat.app.model.util.imgutil.ImageUtils;
import com.bochat.app.mvp.presenter.BasePresenter;

import java.io.File;

import javax.inject.Inject;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;

/**
 * Author      : FJ
 * CreateDate  : 2019/04/26 10:52
 * Description :
 */

public class GroupManageEditPresenter extends BasePresenter<GroupManageEditContract.View> implements GroupManageEditContract.Presenter{
    
    @Inject
    IOSSModel ossModel;
    
    @Inject
    IGroupModule groupModule;

    private GroupEntity groupEntity;
    
    private String errorMsg;
    
    private File headImage;
    
    @Override
    public void initInjector() {
        getBusinessComponent().inject(this);
    }

    @Override
    public void onViewRefresh() {
        super.onViewRefresh();
        Intent intent = getView().getViewIntent();
        if (intent.hasExtra(RouteExtra.GroupEntity)){
            groupEntity = (GroupEntity)intent.getSerializableExtra(RouteExtra.GroupEntity);
            getView().onRefresh(groupEntity);
        } 
        if(intent.hasExtra(RouteExtra.GroupName_String)){
            String groupName = intent.getStringExtra(RouteExtra.GroupName_String);
            groupEntity.setGroup_name(groupName);
            getView().updateNameText(groupName);
        }
    }

    @Override
    public void onEditGroupNameClick() {
        ARouter.getInstance().build(RouteTable.CONVERSATION_GROUP_MANAGE_EDIT_NAME)
                .withSerializable(RouteExtra.GroupName_String, groupEntity.getGroup_name()).navigation();
    }

    @Override
    public void onEnterClick(final GroupEntity groupEntity) {
        Disposable subscribe = Observable.create(new ObservableOnSubscribe<CodeEntity>() {
            @Override
            public void subscribe(ObservableEmitter<CodeEntity> emitter) throws Exception {
                try {
                    String headImageOssPath = "";
                    try {
                        File file = new File(groupEntity.getGroup_head());
                        if(file.exists()){
                            errorMsg = "操作失败";
                            headImage = null;
                            final ConditionObject conditionObject = new ConditionObject();
                            Context context = MainApplication.getContext();
                            String cacheDir = context.getCacheDir().getAbsolutePath();
                            ImageUtils.compressImage(context, file.getPath(), cacheDir, new ImageUtils.CompressImageCallback() {
                                @Override
                                public void onStart() {
                                }

                                @Override
                                public void onSuccess(File file) {
                                    conditionObject.setHandleResult(true);
                                    headImage = file;
                                    conditionObject.open();
                                }

                                @Override
                                public void onError(Throwable e) {
                                    conditionObject.setHandleResult(false);
                                    conditionObject.open();
                                }
                            });
                            conditionObject.block();
                            if(!conditionObject.isHandleSuccess()){
                                errorMsg = "解析图片失败";
                                emitter.onError(new Throwable(errorMsg));
                                return;
                            }
                            if(headImage != null){
                                headImageOssPath = ossModel.uploadHeadImage(headImage);
                            }
                        }
                    } catch (Exception ignored) {
                    }
                    headImageOssPath = TextUtils.isEmpty(headImageOssPath) ? groupEntity.getGroup_head() : headImageOssPath;
                    groupEntity.setGroup_head(headImageOssPath);
                    CodeEntity codeEntity = groupModule.changeGroupInfo(
                            groupEntity.getGroup_head(), groupEntity.getGroup_level(), groupEntity.getGroup_introduce(),
                            groupEntity.getGroup_label(), "", (int) groupEntity.getGroup_id(),
                            groupEntity.getGroup_name(), "", 0.0);
                    if (codeEntity.getRetcode() != 0) {
                        emitter.onError(new RxErrorThrowable(codeEntity));
                        return;
                    }
                    CachePool.getInstance().group().put(groupEntity);
                    emitter.onNext(codeEntity);
                    emitter.onComplete();
                } catch (Exception e) {
                    emitter.onError(e);
                    e.printStackTrace();
                }
            }
        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer<CodeEntity>() {
            @Override
            public void accept(CodeEntity entity) throws Exception {
                getView().hideLoading("");
                ARouter.getInstance().build(RouteTable.CONVERSATION_GROUP_DETAIL)
                        .withString(RouteExtra.ConversationId_String, String.valueOf(groupEntity.getGroup_id())).navigation();
            }
        }, new RxErrorConsumer<Throwable>(this)  {
            @Override
            public void acceptError(Throwable object) {
                getView().hideLoading("");
            }

            @Override
            public String getDefaultErrorTips() {
                return errorMsg;
            }
        });
        getView().showLoading(subscribe);
    }
}
