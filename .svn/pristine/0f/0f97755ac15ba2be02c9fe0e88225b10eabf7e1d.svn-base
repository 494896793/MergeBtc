package com.bochat.app.model.modelImpl;

import com.bochat.app.business.cache.CachePool;
import com.bochat.app.common.model.IGroupLocalModel;
import com.bochat.app.common.model.IGroupModule;
import com.bochat.app.common.util.MD5Util;
import com.bochat.app.model.bean.CodeEntity;
import com.bochat.app.model.bean.GroupApplyEntity;
import com.bochat.app.model.bean.GroupCreateEntity;
import com.bochat.app.model.bean.GroupDataEntity;
import com.bochat.app.model.bean.GroupEntity;
import com.bochat.app.model.bean.GroupLevelListEntity;
import com.bochat.app.model.bean.GroupListEntity;
import com.bochat.app.model.bean.GroupMemberEntity;
import com.bochat.app.model.bean.GroupMemberListEntity;
import com.bochat.app.model.bean.HttpClientEntity;
import com.bochat.app.model.constant.Constan;
import com.bochat.app.model.greendao.DBManager;
import com.bochat.app.model.net.HttpClient;
import com.bochat.app.model.net.RetrofitService;
import com.bochat.app.model.util.Api;

import java.util.ArrayList;
import java.util.List;

/**
 * 2019/4/16
 * Author LDL
 **/
public class GroupModule implements IGroupModule, IGroupLocalModel {

    @Override
    public CodeEntity dealGroupApply(String gapply_id, String gapply_state, String refuse_text) {
        CodeEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity)HttpClient.getInstance().sends(CodeEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).handleGroupApply(Api.handleGroupApply,gapply_id,gapply_state,refuse_text));
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new CodeEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }

    @Override
    public GroupCreateEntity createGroup(String userId, String group_name, String introduce, String label, String head) {
        GroupCreateEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity)HttpClient.getInstance().sends(GroupCreateEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class)
                .createGroup(Api.createGroup,userId,group_name,introduce,label,head)
        );
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new GroupCreateEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }

    @Override
    public CodeEntity changeGroupInfo(String head, String level, String introduce, String label, String target, int group_id, String group_name, String tradepwd, double price){
        CodeEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(CodeEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).updateChange(
                Api.updateChange,head,level,introduce,label,
                target,group_id,
                group_name, MD5Util.lock(tradepwd),price
        ));
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new CodeEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }

    @Override
    public CodeEntity dissolutionGroup(int group_id, String userId) {
        CodeEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(CodeEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).dissmissGroup(
                Api.dissmissGroup,group_id,userId
        ));
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new CodeEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }

    @Override
    public CodeEntity quitGroup(int group_id) {
        CodeEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(CodeEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).quitGroup(
                Api.quitGroup,group_id
        ));
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new CodeEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }

    @Override
    public GroupListEntity getGroupInfo(int group_id, String keyword, int start, int offset) {
        GroupListEntity groupEntity=null;
        HttpClientEntity httpClientEntity=null;
        if(group_id==-1){
            httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(GroupListEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).queryGroup(Api.getUpdateChange,keyword,start,offset));
        }else{
            httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(GroupDataEntity.class,HttpClient.getInstance().retrofit().create(RetrofitService.class).queryGroupExact(Api.getUpdateChange,group_id,0,0));
        }
        if(httpClientEntity.getCode()==0){
            if(group_id==-1){
                groupEntity=httpClientEntity.getObj();
            }else{
                groupEntity=new GroupListEntity();
                groupEntity.setCurrentPage(1);
                groupEntity.setPageSize(1);
                groupEntity.setIsNext(0);
                groupEntity.setTotalPage(1);
                groupEntity.setTotalCount(1);
                List<GroupEntity> list=new ArrayList<>();
                if(httpClientEntity.getObj()!=null){
                    GroupEntity groupEntity1=((GroupDataEntity)httpClientEntity.getObj()).getData();
                    list.add(groupEntity1);
                }
                groupEntity.setItems(list);
            }
        }else{
            groupEntity=new GroupListEntity();
            groupEntity.setCode(httpClientEntity.getCode());
            groupEntity.setMsg(httpClientEntity.getMessage());
            groupEntity.setRetcode(httpClientEntity.getCode());
        }
        return groupEntity;
    }

    @Override
    public List<GroupApplyEntity> getGroupApply(String userId, int start) {
        return null;
    }

    @Override
    public GroupEntity getMyGroupApply(String userId, int start, int offset) {
        return null;
    }

    @Override
    public CodeEntity addGroupManager(int group_id,String groupToken,int targetId,String targetToken) {
        CodeEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(CodeEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).addGroupManager(
                Api.addGroupManager,group_id,groupToken,targetId,targetToken
        ));
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new CodeEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }

    @Override
    public GroupListEntity queryMyGroupList(String userId, int start, int offset) {
        GroupListEntity groupListEntity=null;
        HttpClientEntity httpClientEntity=null;
        if(start==0&&offset==0){
            httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(GroupListEntity.class,HttpClient.getInstance().retrofit().create(RetrofitService.class)
                    .queryMyGroupList(Api.queryMyGroupList,userId,start,offset)
            );
        }else{
            httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(GroupListEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class)
                    .queryMyGroupList(Api.queryMyGroupList,userId,start,offset)
            );
        }
        if(httpClientEntity.getCode()== Constan.NET_SUCCESS){
            groupListEntity = httpClientEntity.getObj();
            if(start==0&&offset==0){
                if(groupListEntity!=null){
                    groupListEntity.setItems(groupListEntity.getData());
                }
            }
        }else{
            groupListEntity=new GroupListEntity();
            groupListEntity.setCode(httpClientEntity.getCode());
            groupListEntity.setMsg(httpClientEntity.getMessage());
            groupListEntity.setRetcode(httpClientEntity.getCode());
        }
        return groupListEntity;
    }

    @Override
    public GroupMemberListEntity queryGroupMembers(int group_id, int start, int offset) {
        GroupMemberListEntity groupMemberListEntity=null;
        HttpClientEntity httpClientEntity=null;
        if(start==0&&offset==0){
            httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(GroupMemberListEntity.class,HttpClient.getInstance().retrofit().create(RetrofitService.class).queryGroupMembers(Api.queryGroupMembers,group_id,start,offset));
        }else{
            httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(GroupMemberListEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).queryGroupMembers(Api.queryGroupMembers,group_id,start,offset));
        }
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            groupMemberListEntity=httpClientEntity.getObj();
            if(start==0&&offset==0){
                if(groupMemberListEntity!=null){
                    groupMemberListEntity.setItems(groupMemberListEntity.getData());
                }
            }
        }else{
            groupMemberListEntity=new GroupMemberListEntity();
            groupMemberListEntity.setCode(httpClientEntity.getCode());
            groupMemberListEntity.setMsg(httpClientEntity.getMessage());
            groupMemberListEntity.setRetcode(httpClientEntity.getCode());
        }
        return groupMemberListEntity;
    }

    @Override
    public CodeEntity joinGroup(String group_id, String group_name) {
        CodeEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(CodeEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).joinGroup(Api.joinGroup,group_id, group_name));
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new CodeEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }
    
    @Override
    public GroupLevelListEntity queryGroupLevel(String group_id) {
        GroupLevelListEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(GroupLevelListEntity.class, HttpClient.getInstance().retrofit().create(RetrofitService.class).queryGroupLevel(Api.queryGroupLevel,group_id));
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new GroupLevelListEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }

    @Override
    public CodeEntity invitejoinGroup(String group_id, String targetId, String name) {
        CodeEntity codeEntity=null;
        HttpClientEntity httpClientEntity= (HttpClientEntity) HttpClient.getInstance().sends(CodeEntity.class,"data",HttpClient.getInstance().retrofit().create(RetrofitService.class).invitejoinGroup(Api.invitejoinGroup,group_id,targetId, name));
        if(httpClientEntity.getCode()==Constan.NET_SUCCESS){
            codeEntity=httpClientEntity.getObj();
        }else{
            codeEntity=new CodeEntity();
            codeEntity.setCode(httpClientEntity.getCode());
            codeEntity.setMsg(httpClientEntity.getMessage());
            codeEntity.setRetcode(httpClientEntity.getCode());
        }
        return codeEntity;
    }

    @Override
    public void saveOrUpdateGroupList(List<GroupEntity> items) {
        CachePool.getInstance().group().clear();
        CachePool.getInstance().group().put(items);
    }

    @Override
    public GroupEntity findGroupById(int group_id) {
        return CachePool.getInstance().group().get(group_id);
    }

    @Override
    public void saveOrUpdateGroupMember(List<GroupMemberEntity> groupMemberEntities) {
        if(groupMemberEntities != null && !groupMemberEntities.isEmpty()){
            DBManager.getInstance().saveGroupMemberListEntity(groupMemberEntities);
        }
    }
    
    @Override
    public List<GroupEntity> findAllGroup() {
        return CachePool.getInstance().group().getAll();
    }

    @Override
    public List<GroupMemberEntity> findGroupMembersByGroupId(int groupId) {
        return DBManager.getInstance().findGroupMembersByGroupId(groupId);
    }
}
