package com.bochat.app.business.main.mine;

import com.bochat.app.business.RxErrorConsumer;
import com.bochat.app.business.RxErrorThrowable;
import com.bochat.app.common.contract.mine.BillContract;
import com.bochat.app.common.model.ITokenAssetModel;
import com.bochat.app.model.bean.CodeEntity;
import com.bochat.app.model.bean.TradingRecordDataEntity;
import com.bochat.app.model.bean.UserCurrencyDataEntity;
import com.bochat.app.mvp.presenter.BasePresenter;

import javax.inject.Inject;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;

/**
 * Author      : FJ
 * CreateDate  : 2019/05/13 17:56
 * Description :
 */

public class BillPresenter extends BasePresenter<BillContract.View> implements BillContract.Presenter {

    @Inject
    ITokenAssetModel tokenAssetModel;
    
    @Override
    public void initInjector() {
        getBusinessComponent().inject(this);
    }

    @Override
    public void onViewRefresh() {
        super.onViewRefresh();
        Disposable subscribe = Observable.create(new ObservableOnSubscribe<CodeEntity>() {
            @Override
            public void subscribe(ObservableEmitter<CodeEntity> emitter) throws Exception {
                try {
                    UserCurrencyDataEntity userCurrencyDataEntity = tokenAssetModel.listUserCurrency();
                    if(userCurrencyDataEntity.getRetcode() != 0){
                        emitter.onError(new RxErrorThrowable(userCurrencyDataEntity));
                    } else {
                        emitter.onNext(userCurrencyDataEntity);
                    }
                    emitter.onComplete();
                } catch (Exception e) {
                    emitter.onError(e);
                    e.printStackTrace();
                }
            }
        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer<CodeEntity>() {
            @Override
            public void accept(CodeEntity entity) throws Exception {
                if(isActive()){
                    if(entity instanceof UserCurrencyDataEntity){
                        getView().updateTokenList((UserCurrencyDataEntity)entity);
                    }
                }
            }
        }, new RxErrorConsumer<Throwable>(this)  {
            @Override
            public void acceptError(Throwable object) {
            }
        });
    }

    @Override
    public void getTokenList(final String bid, final int type) {
        Disposable subscribe = Observable.create(new ObservableOnSubscribe<CodeEntity>() {
            @Override
            public void subscribe(ObservableEmitter<CodeEntity> emitter) throws Exception {
                try {
                    TradingRecordDataEntity tradingRecordDataEntity = tokenAssetModel.tradingRecord(1, 1000, Integer.valueOf(bid), type);
                    if(tradingRecordDataEntity.getRetcode() != 0){
                        emitter.onError(new RxErrorThrowable(tradingRecordDataEntity));
                    } else {
                        emitter.onNext(tradingRecordDataEntity);
                    }
                    emitter.onComplete();
                } catch (Exception e) {
                    emitter.onError(e);
                    e.printStackTrace();
                }
            }
        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer<CodeEntity>() {
            @Override
            public void accept(CodeEntity entity) throws Exception {
                if(isActive()){
                    if(entity instanceof TradingRecordDataEntity){
                        getView().updateTradeList((TradingRecordDataEntity)entity);
                    }
                }
            }
        }, new RxErrorConsumer<Throwable>(this)  {
            @Override
            public void acceptError(Throwable object) {
            }
        });
    }
}
