package com.bochat.app.business.main.bill;

import android.content.Intent;

import com.alibaba.android.arouter.launcher.ARouter;
import com.bochat.app.app.RouteExtra;
import com.bochat.app.app.RouteTable;
import com.bochat.app.business.DaggerBusinessComponent;
import com.bochat.app.business.RxErrorConsumer;
import com.bochat.app.business.RxErrorThrowable;
import com.bochat.app.common.contract.bill.TokenTransferReceiveContract;
import com.bochat.app.common.model.ITokenAssetModel;
import com.bochat.app.model.bean.CurrencyDetailDataEntity;
import com.bochat.app.model.bean.UserCurrencyDataEntity;
import com.bochat.app.model.bean.UserCurrencyEntity;
import com.bochat.app.mvp.presenter.BasePresenter;

import org.json.JSONException;
import org.json.JSONObject;

import javax.inject.Inject;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;


/**
 * Author      : ZLB
 * CreateDate  : 2019/4/26 0026 16:15
 * Description :
 */
public class TokenTransferReceivePresenter extends BasePresenter<TokenTransferReceiveContract.View> implements  TokenTransferReceiveContract.Presenter {
    
    @Inject
    ITokenAssetModel tokenAssetModel;
    
    private UserCurrencyDataEntity userCurrencyDataEntity;
    
    private UserCurrencyEntity userCurrencyEntity;
    
    @Override
    public void onViewRefresh() {
        super.onViewRefresh();
        Intent viewIntent = getView().getViewIntent();
        if (viewIntent.hasExtra(RouteExtra.UserCurrencyDataEntity)) {
            userCurrencyDataEntity = (UserCurrencyDataEntity) viewIntent.getSerializableExtra(RouteExtra.UserCurrencyDataEntity);
        }
        if(viewIntent.hasExtra(RouteExtra.UserCurrencyEntity)){
            userCurrencyEntity = (UserCurrencyEntity)viewIntent.getSerializableExtra(RouteExtra.UserCurrencyEntity);
        }
        if(userCurrencyEntity == null){
            if(userCurrencyDataEntity == null || userCurrencyDataEntity.getData() == null || userCurrencyDataEntity.getData().isEmpty()){
                getView().showTips("初始化失败");
                return;
            }
            userCurrencyEntity = userCurrencyDataEntity.getData().get(0);
        }
        Disposable subscribe = Observable.create(new ObservableOnSubscribe<CurrencyDetailDataEntity>() {
            @Override
            public void subscribe(ObservableEmitter<CurrencyDetailDataEntity> emitter) throws Exception {
                try {
                    CurrencyDetailDataEntity entity = tokenAssetModel.getUserCurrencyDetails(Integer.valueOf(userCurrencyEntity.getBid()));;
                    if(entity.getRetcode() != 0){
                        emitter.onError(new RxErrorThrowable(entity));
                        return;
                    }
                    emitter.onNext(entity);
                    emitter.onComplete();
                } catch (Exception e) {
                    emitter.onError(e);
                    e.printStackTrace();
                }
            }
        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer<CurrencyDetailDataEntity>() {
            @Override
            public void accept(CurrencyDetailDataEntity entity) throws Exception {
                getView().hideLoading("");
                getView().updateQRCode(format(entity.getData().getAddress(), entity.getData().getbIamge(), 
                        entity.getData().getbName(), entity.getData().getBid(),
                        entity.getData().getTotalAmount(),entity.getData().getCnyPrice()
                ));
                getView().updateTokenInfo(entity);
            }
        }, new RxErrorConsumer<Throwable>(this)  {
            @Override
            public void acceptError(Throwable object) {
                getView().hideLoading("");
            }
        });
        getView().showLoading(subscribe);
    }

    private String format(String address, String image, String name, String bid, String totalAmount, String cnyPrice){
        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("bImage", image);
            jsonObject.put("bName", name);
            jsonObject.put("address", address);
            jsonObject.put("bid", bid);
            jsonObject.put("totalAmount", totalAmount);
            jsonObject.put("cnyPrice", cnyPrice);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return jsonObject.toString();
    }
    
    @Override
    public void initInjector() {
        DaggerBusinessComponent.create().inject(this);
    }

    @Override
    public void onChooseClick() {
        if(userCurrencyDataEntity != null && !userCurrencyDataEntity.isEmpty()){
            ARouter.getInstance().build(RouteTable.MINE_TOKEN_TRANSFER_SELECT_COIN)
                    .withString(RouteExtra.ReturnUrl, RouteTable.MINE_TOKEN_TRANSFER_RECEIVE)
                    .withSerializable(RouteExtra.UserCurrencyEntity, userCurrencyEntity)
                    .withSerializable(RouteExtra.UserCurrencyDataEntity, userCurrencyDataEntity).navigation();
        }
    }
}
