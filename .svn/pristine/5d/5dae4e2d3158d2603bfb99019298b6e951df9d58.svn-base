package com.bochat.app.business.main.dynamic;

import com.bochat.app.business.cache.CachePool;
import com.bochat.app.common.contract.dynamic.KChatContract;
import com.bochat.app.common.model.IMarketCenterModel;
import com.bochat.app.common.router.RouterMarketQuotationDetail;
import com.bochat.app.common.util.ALog;
import com.bochat.app.model.modelImpl.MarketCenter.KLineCommand;
import com.bochat.app.model.modelImpl.MarketCenter.KLineEntity;
import com.bochat.app.model.modelImpl.MarketCenter.MarketCenterObserver;
import com.bochat.app.mvp.presenter.BasePresenter;

import javax.inject.Inject;

/**
 * 2019/6/19
 * Author LDL
 **/
public class KChatPresenter extends BasePresenter<KChatContract.View> implements KChatContract.Presenter,MarketCenterObserver<KLineEntity> {

    @Inject
    IMarketCenterModel marketCenterModel;

    private String userId;
    private String marketId;
    private boolean isFind=false;
    
    @Override
    public void initInjector() {
        getBusinessComponent().inject(this);
    }

    private MarketCenterObserver<KLineEntity> observer;

    @Override
    public void onViewRefresh() {
        super.onViewRefresh();


        RouterMarketQuotationDetail routerMarketQuotationDetail=getExtra(RouterMarketQuotationDetail.class);

        userId = String.valueOf(CachePool.getInstance().user().getLatest().getId());
        marketCenterModel.addObserver(KLineEntity.class, this);
        marketId=routerMarketQuotationDetail.getEntity().getMarketId();
//        marketId="37";
        KLineCommand kLineCommand=new KLineCommand(userId, marketId, KLineCommand.KLineType.INSTANT, 0, 100);
        marketCenterModel.sendCommand(kLineCommand, new IMarketCenterModel.SendCommandCallback() {
            @Override
            public void onComplete(IMarketCenterModel.SendCommandResult result) {
                ALog.d("send " + result);
            }
        });
    }

    @Override
    public void getData() {
    }
    
    private void sendKLineCommon(int startPage,int pageSize,String marketId, KLineCommand.KLineType type){
        KLineCommand kLineCommand=new KLineCommand(userId, marketId, type, startPage, pageSize);
        marketCenterModel.sendCommand(kLineCommand, new IMarketCenterModel.SendCommandCallback() {
            @Override
            public void onComplete(IMarketCenterModel.SendCommandResult result) {
                ALog.d("send " + result);
            }
        });
    }

    @Override
    public void get5MINData(int startPage,int pageSize,String marketId,boolean isFind) {
        this.isFind=isFind;
        sendKLineCommon(startPage,pageSize,marketId,KLineCommand.KLineType.MIN5);
    }

    @Override
    public void get30MINData(int startPage,int pageSize,String marketId,boolean isFind) {
        this.isFind=isFind;
        sendKLineCommon(startPage,pageSize,marketId,KLineCommand.KLineType.MIN30);
    }

    @Override
    public void getHOURData(int startPage,int pageSize,String marketId,boolean isFind) {
        this.isFind=isFind;
        sendKLineCommon(startPage,pageSize,marketId,KLineCommand.KLineType.HOUR);
    }

    @Override
    public void getDAYData(int startPage,int pageSize,String marketId,boolean isFind) {
        this.isFind=isFind;
        sendKLineCommon(startPage,pageSize,marketId,KLineCommand.KLineType.DAY);
    }

    @Override
    public void getWEEKData(int startPage,int pageSize,String marketId,boolean isFind) {
        this.isFind=isFind;
        sendKLineCommon(startPage,pageSize,marketId,KLineCommand.KLineType.WEEK);
    }

    @Override
    public void onReceive(KLineEntity entity) {
        if(getView()!=null){
            getView().getData(entity,isFind);
        }
    }
}
