package com.bochat.app.app.activity;

import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;

import com.alibaba.android.arouter.facade.annotation.Route;
import com.alibaba.android.arouter.launcher.ARouter;
import com.bochat.app.R;
import com.bochat.app.app.RouteExtra;
import com.bochat.app.app.adapter.DynamicNoticeAdapter;
import com.bochat.app.app.view.BoChatTopBar;
import com.bochat.app.common.contract.dynamic.DynamicNoticeContract;
import com.bochat.app.model.bean.DynamicNoticeEntity;
import com.bochat.app.model.bean.DynamicNoticeListEntity;
import com.bochat.app.mvp.view.BaseActivity;
import com.liaoinstan.springview.container.DefaultFooter;
import com.liaoinstan.springview.container.DefaultHeader;
import com.liaoinstan.springview.widget.SpringView;

import java.util.ArrayList;

import javax.inject.Inject;

import butterknife.BindView;

import static com.bochat.app.app.RouteExtra.DYNAMIC_NOTICE_CONTENT;
import static com.bochat.app.app.RouteExtra.DYNAMIC_NOTICE_ENTITY;
import static com.bochat.app.app.RouteExtra.WEB_LINK;
import static com.bochat.app.app.RouteExtra.WEB_TITLE;
import static com.bochat.app.app.RouteTable.DYNAMIC_MAIN;
import static com.bochat.app.app.RouteTable.DYNAMIC_MAIN_NOTICE;
import static com.bochat.app.app.RouteTable.DYNAMIC_MAIN_NOTICE_DETAIL;

/**
 * 2019/5/9
 * Author LDL
 **/
@Route(path = DYNAMIC_MAIN_NOTICE)
public class DynamicNoticeActivity extends BaseActivity<DynamicNoticeContract.Presenter> implements DynamicNoticeContract.View,SpringView.OnFreshListener, DynamicNoticeAdapter.OnChildItemClick {

    @Inject
    DynamicNoticeContract.Presenter presenter;

    @BindView(R.id.springView)
    SpringView springView;

    @BindView(R.id.recycler)
    RecyclerView recycler;

    @BindView(R.id.bochat_topbar)
    BoChatTopBar bochat_topbar;

    private int pageIndex=1;
    private int pageSize=10;
    private DynamicNoticeAdapter adapter;


    @Override
    protected void initInjector() {
        getActivityComponent().inject(this);
    }

    @Override
    protected DynamicNoticeContract.Presenter initPresenter() {
        return presenter;
    }

    @Override
    protected void setRootView(Bundle savedInstanceState) {
        setContentView(R.layout.activity_dynamic_notice);


    }

    private void initSpringView(){
        springView.setListener(this);
        springView.setHeader(new DefaultHeader(this));
        springView.setFooter(new DefaultFooter(this));
    }

    @Override
    protected void initWidget() {
        initSpringView();

        initTopbar();
        onRefresh();
        initRecyclerView();
    }

    private void initTopbar(){
        bochat_topbar.setTitleText("公告列表");
        bochat_topbar.setReturnBtVisible(true);
        bochat_topbar.setRightButtonInvisble(true);
    }

    private void initRecyclerView(){
        recycler.setLayoutManager(new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false));
        adapter=new DynamicNoticeAdapter(new ArrayList<DynamicNoticeEntity>(),this);
        adapter.setOnChildItemClick(this);
        recycler.setAdapter(adapter);
    }

    @Override
    public void onRefresh() {
        pageIndex=1;
        presenter.listAnnouncement(pageIndex,pageSize,1);
    }

    @Override
    public void onLoadmore() {
        pageIndex++;
        presenter.listAnnouncement(pageIndex,pageSize,1);
    }

    @Override
    public void getListAnnouncement(DynamicNoticeListEntity entity) {
        springView.onFinishFreshAndLoad();
        if(entity!=null&&entity.getItems()!=null){
            if(pageIndex==1){
                adapter.refreshData(entity.getItems());
            }else{
                adapter.loadData(entity.getItems());
            }
        }
    }

    @Override
    public void getListAnnouncementFailed() {
        springView.onFinishFreshAndLoad();
    }

    @Override
    public void onItemClick(int position, DynamicNoticeEntity entity) {
        ARouter.getInstance().build(DYNAMIC_MAIN).withString(WEB_TITLE,entity.getTitle()).withString(WEB_LINK,entity.getReturnUrl()).withBoolean(RouteExtra.IsShareUrl,false).withSerializable(DYNAMIC_NOTICE_ENTITY,entity).navigation();
    }
}
