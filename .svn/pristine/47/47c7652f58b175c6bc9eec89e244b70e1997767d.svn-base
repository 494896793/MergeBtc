package com.bochat.app.business.main.book;

import android.content.Intent;

import com.bochat.app.business.RxErrorConsumer;
import com.bochat.app.business.RxErrorThrowable;
import com.bochat.app.business.cache.CachePool;
import com.bochat.app.common.contract.book.DealAddFriendContract;
import com.bochat.app.common.model.IIMModel;
import com.bochat.app.common.model.IUserModel;
import com.bochat.app.model.bean.CodeEntity;
import com.bochat.app.model.bean.FriendApplyEntity;
import com.bochat.app.model.bean.FriendEntity;
import com.bochat.app.model.bean.FriendListEntity;
import com.bochat.app.model.bean.GroupApplyEntity;
import com.bochat.app.model.event.DealAddFriendEvent;
import com.bochat.app.model.event.DealAddGroupEvent;
import com.bochat.app.mvp.presenter.BasePresenter;

import org.greenrobot.eventbus.EventBus;

import javax.inject.Inject;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;
import io.rong.imkit.RongIM;

/**
 * 2019/4/22
 * Author ZZW
 **/
public class DealAddFriendPresenter extends BasePresenter<DealAddFriendContract.View> implements DealAddFriendContract.Presenter {

    @Inject
    IIMModel iModel;

    @Inject
    IUserModel userModel;

    private FriendApplyEntity friendApply;
    
    private GroupApplyEntity groupApply;

    @Override
    public void onViewRefresh() {
        super.onViewRefresh();
        
        friendApply = null;
        groupApply = null;
        Intent intent = getView().getViewIntent();
        if(intent.hasExtra("friendApply")){
            friendApply = (FriendApplyEntity)intent.getSerializableExtra("friendApply");
            getView().onRefresh(friendApply);
        }
        if(intent.hasExtra("groupApply")){
            groupApply = (GroupApplyEntity)intent.getSerializableExtra("groupApply");
            getView().onRefresh(groupApply);
        }
    }

    @Override
    public void initInjector() {
        getBusinessComponent().inject(this);
    }

    @Override
    public void acceptFriend(final String targetId, final String text, final int sourceType) {
        
        Disposable subscribe = Observable.create(new ObservableOnSubscribe<Boolean>() {
            @Override
            public void subscribe(ObservableEmitter<Boolean> emitter) throws Exception {
                try {
                    CodeEntity codeEntity=userModel.addFriend(targetId);
                    if(codeEntity.getRetcode() != 0){
                        emitter.onError(new RxErrorThrowable(codeEntity));
                        return;
                    }
                    boolean result = iModel.acceptFriend(targetId, text, sourceType);
                    if(!result){
                        emitter.onError(new Throwable());
                        return;
                    }
                    friendApply.setApply_state("2");
                    CachePool.getInstance().friendApply().put(friendApply);
                    EventBus.getDefault().post(new DealAddFriendEvent(friendApply));
                    try {
                        FriendListEntity friendInfo = userModel.getFriendInfo(targetId, -1, -1);
                        if(friendInfo.getRetcode() != 0){
                            throw new Exception();
                        }
                        FriendEntity friendEntity = friendInfo.getItems().get(0);
                        friendEntity.setFriend_state(1);
                        CachePool.getInstance().friend().put(friendEntity);
                        CachePool.getInstance().friendDetail().put(friendEntity);
                        emitter.onNext(true);
                    } catch (Exception e){
                        emitter.onNext(false);
                    }
                    emitter.onComplete();
                } catch (Exception e) {
                    emitter.onError(e);
                    e.printStackTrace();
                }
            }
        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer<Boolean>() {
            @Override
            public void accept(Boolean entity) throws Exception {
                if(isActive()){
                    getView().hideLoading("");
                    RongIM.getInstance().startPrivateChat(getView().getViewContext(),
                            String.valueOf(friendApply.getProposer_id()), friendApply.getNickname());
                    getView().finish();
                }
            }
        }, new RxErrorConsumer<Throwable>(this)  {
            @Override
            public void acceptError(Throwable object) {
                if(isActive()){
                    getView().hideLoading("");
                }
            }

            @Override
            public String getDefaultErrorTips() {
                return "";
            }
        });
        getView().showLoading(subscribe);
    }
    
    @Override
    public void refuseFriend(String targetId, String text, int sourceType) {
        friendApply.setApply_state("0");
        CachePool.getInstance().friendApply().put(friendApply);
        
        
        //TODO wangyufei 为啥要发这玩意？
        EventBus.getDefault().post(new DealAddFriendEvent(friendApply));
        getView().finish();
    }

    @Override
    public void acceptGroup(String targetId, String text, int sourceType) {

    }
    
    @Override
    public void refuseGroup(String targetId, String text, int sourceType) {
        groupApply.setApply_state("0");
        CachePool.getInstance().groupApply().put(groupApply);
        EventBus.getDefault().post(new DealAddGroupEvent(groupApply));
        getView().finish();
    }
}
