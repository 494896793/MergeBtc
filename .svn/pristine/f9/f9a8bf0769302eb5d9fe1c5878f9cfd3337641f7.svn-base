package com.bochat.app.business.main.conversation;

import android.content.Intent;

import com.alibaba.android.arouter.launcher.ARouter;
import com.bochat.app.app.RouteExtra;
import com.bochat.app.app.RouteTable;
import com.bochat.app.business.RxErrorConsumer;
import com.bochat.app.business.cache.CachePool;
import com.bochat.app.common.contract.conversation.FriendDetailContact;
import com.bochat.app.common.contract.conversation.GroupMemberContract;
import com.bochat.app.common.model.IUserLocalModel;
import com.bochat.app.common.model.IUserModel;
import com.bochat.app.model.bean.FriendEntity;
import com.bochat.app.model.bean.FriendListEntity;
import com.bochat.app.mvp.presenter.BasePresenter;

import javax.inject.Inject;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;
import io.rong.imkit.RongIM;

/**
 * Author      : FJ
 * CreateDate  : 2019/04/15 18:59
 * Description :
 */

public class FriendDetailPresenter extends BasePresenter<FriendDetailContact.View> implements FriendDetailContact.Presenter{

    @Inject
    IUserModel userModel;
    
    @Inject
    IUserLocalModel userLocalModel;
    
    private FriendEntity friendEntity;
    
    private String friendId;

    private int myGroupRole;
    private int friendGroupRole;
    
    private boolean isFriend;
    private boolean isMe;
    
    @Override
    public boolean isActive() {
        return super.isActive() && friendEntity != null;
    }

    @Override
    public void onViewRefresh() {
        
        Intent intent = getView().getViewIntent();
        
        myGroupRole = intent.getIntExtra(RouteExtra.GroupRole_Int, GroupMemberContract.ROLE_NONE);
        friendGroupRole = intent.getIntExtra(RouteExtra.FriendGroupRole_Int, GroupMemberContract.ROLE_NONE);
        
        if(intent.hasExtra(RouteExtra.FriendEntity)){
            friendEntity = (FriendEntity)intent.getSerializableExtra(RouteExtra.FriendEntity);
            friendId = String.valueOf(friendEntity.getId());
            initRole(friendEntity);
            getView().updateFriendDetail(friendEntity);
        } else if(intent.hasExtra(RouteExtra.ConversationId_String)){
            friendId = intent.getStringExtra(RouteExtra.ConversationId_String);
            
            Disposable subscribe = Observable.create(new ObservableOnSubscribe<FriendEntity>() {
                @Override
                public void subscribe(ObservableEmitter<FriendEntity> emitter) throws Exception {
                    try {
                        FriendEntity friendEntity = CachePool.getInstance().friendDetail().get(Long.valueOf(friendId));
                        if(friendEntity != null){
                            emitter.onNext(friendEntity);
                        }
                        FriendListEntity friendInfo = userModel.getFriendInfo(friendId, -1, -1);
                        if(friendInfo.getRetcode() == 0 && friendInfo.getItems() != null && friendInfo.getItems().size() > 0){
                            CachePool.getInstance().friendDetail().put(friendInfo.getItems().get(0));
                            if(friendEntity == null){
                                emitter.onNext(friendInfo.getItems().get(0));
                            }
                        }
                        emitter.onComplete();
                    } catch (Exception e) {
                        emitter.onError(e);
                        e.printStackTrace();
                    }
                }
            }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer<FriendEntity>() {
                @Override
                public void accept(FriendEntity entity) throws Exception {
                    friendEntity = entity;
                    initRole(friendEntity);
                    if(isActive()){
                        CachePool.getInstance().friendDetail().put(entity);
                        getView().updateFriendDetail(entity);
                        getView().hideLoading("");
                    }
                }
            }, new RxErrorConsumer<Throwable>(this) {

                @Override
                public void acceptError(Throwable throwable) {
                    if(isActive()){
                        getView().hideLoading("");
                    }
                }

                @Override
                public String getDefaultErrorTips() {
                    return "查询好友信息失败";
                }
            });
            getView().showLoading(subscribe);
        }
    }

    @Override
    public void onQRCodeClick() {
        if(isActive()){
            ARouter.getInstance().build(RouteTable.CONVERSATION_QR_CARD)
                    .withSerializable(RouteExtra.FriendEntity, friendEntity).navigation();
        }
    }
    
    @Override
    public void onAddFriendBtnClick() {
        if(isActive()){
            ARouter.getInstance().build(RouteTable.BOOK_ADDRESS_EDIT_REQUEST).
                    withSerializable(RouteExtra.FriendEntity, friendEntity).navigation();
        }
    }

    @Override
    public void onStartConversationBtnClick() {
        if(isActive()){
            RongIM.getInstance().startPrivateChat(getView().getViewContext(),
                    String.valueOf(friendEntity.getId()), friendEntity.getNickname());
            getView().finish();
        }
    }

    @Override
    public void onManageBtnClick() {
        if(isActive()){
//            if(myGroupRole == GroupMemberContract.ROLE_OWNER || myGroupRole == GroupMemberContract.ROLE_MANAGER){
//                ARouter.getInstance().build(RouteTable.CONVERSATION_GROUP_MEMBER_MANAGE)
//                        .withString(RouteExtra.ConversationId_String, String.valueOf(friendEntity.getId()))
//                        .navigation();
//            } else {
//                ARouter.getInstance().build(RouteTable.CONVERSATION_FRIEND_MANAGE)
//                        .withString(RouteExtra.ConversationId_String,
//                        String.valueOf(friendEntity.getId())).navigation();
//            }
            ARouter.getInstance().build(RouteTable.CONVERSATION_FRIEND_MANAGE)
                    .withString(RouteExtra.ConversationId_String,
                            String.valueOf(friendEntity.getId())).navigation();
        }
    }

    private void initRole(FriendEntity friendEntity){
        FriendEntity friend = CachePool.getInstance().friend().get(friendEntity.getId());
        isFriend = friend != null;
        isMe = CachePool.getInstance().user().getLatest().getId() == friendEntity.getId();
    }
    
    @Override
    public boolean isManagable() {
//        if(myGroupRole != GroupMemberContract.ROLE_NONE){
//            return (myGroupRole == GroupMemberContract.ROLE_OWNER || myGroupRole == GroupMemberContract.ROLE_MANAGER) 
//                    && friendGroupRole != GroupMemberContract.ROLE_OWNER;
//        } else {
//            return isFriend;
//        }
        return isFriend;
    }

    @Override
    public boolean isFriend() {
        return isFriend;
    }

    @Override
    public boolean isMe() {
        return isMe;
    }

    @Override
    public void initInjector() {
        getBusinessComponent().inject(this);
    }
}
