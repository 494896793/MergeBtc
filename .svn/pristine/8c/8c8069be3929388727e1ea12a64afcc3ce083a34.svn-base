package com.bochat.app.business.main.dynamic;

import android.content.Intent;

import com.bochat.app.app.RouteExtra;
import com.bochat.app.business.RxErrorConsumer;
import com.bochat.app.business.RxErrorThrowable;
import com.bochat.app.common.contract.dynamic.FastSpeedContract;
import com.bochat.app.common.model.ITokenAssetModel;
import com.bochat.app.model.bean.CodeEntity;
import com.bochat.app.model.bean.UserCurrencyDataEntity;
import com.bochat.app.mvp.presenter.BasePresenter;

import javax.inject.Inject;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.Disposable;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;

/**
 * 2019/6/5
 * Author LDL
 **/
public class FastSpeedPresenter extends BasePresenter<FastSpeedContract.View> implements FastSpeedContract.Presenter {

    private UserCurrencyDataEntity userCurrencyDataEntity;

    @Inject
    ITokenAssetModel tokenAssetModel;

    @Override
    public void initInjector() {
        getBusinessComponent().inject(this);
    }

    @Override
    public void onViewRefresh() {
        super.onViewRefresh();
        Intent viewIntent=getView().getViewIntent();
        if (viewIntent.hasExtra(RouteExtra.UserCurrencyDataEntity)) {
            userCurrencyDataEntity = (UserCurrencyDataEntity) viewIntent.getSerializableExtra(RouteExtra.UserCurrencyDataEntity);
            getView().updateCoinList(userCurrencyDataEntity.getData());
        } else if (userCurrencyDataEntity == null){
            Disposable subscribe = Observable.create(new ObservableOnSubscribe<CodeEntity>() {
                @Override
                public void subscribe(ObservableEmitter<CodeEntity> emitter) throws Exception {
                    try {
                        userCurrencyDataEntity = tokenAssetModel.listUserCurrency();
                        if(userCurrencyDataEntity.getRetcode() != 0){
                            emitter.onError(new RxErrorThrowable(userCurrencyDataEntity));
                            return;
                        }
                        emitter.onNext(userCurrencyDataEntity);
                        emitter.onComplete();
                    } catch (Exception e) {
                        emitter.onError(e);
                        e.printStackTrace();
                    }
                }
            }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Consumer<CodeEntity>() {
                @Override
                public void accept(CodeEntity entity) throws Exception {
                    getView().updateCoinList(userCurrencyDataEntity.getData());

                }
            }, new RxErrorConsumer<Throwable>(this)  {
                @Override
                public void acceptError(Throwable object) {
                }
            });
        }
    }

}
