package com.bochat.app.app.activity;

import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.alibaba.android.arouter.facade.annotation.Route;
import com.bochat.app.R;
import com.bochat.app.app.RouteTable;
import com.bochat.app.common.contract.LoginContract;
import com.bochat.app.common.util.ALog;
import com.bochat.app.mvp.view.BaseActivity;

import javax.inject.Inject;

import butterknife.BindView;
import butterknife.OnClick;

/**
 * Author      : FJ
 * CreateDate  : 2019/04/09 19:01
 * Description :
 */
@Route(path = RouteTable.USER_LOGIN)
public class LoginActivity extends BaseActivity<LoginContract.Presenter> implements LoginContract.View {

    @Inject
    LoginContract.Presenter presenter;

    @BindView(R.id.phone_number_input) EditText phoneNumberInput;
    @BindView(R.id.verify_code_input) EditText verifyCodeInput;
    @BindView(R.id.password_input) EditText passwordInput;
    @BindView(R.id.get_verify_code_btn) Button getVerifyBtn;
    @BindView(R.id.forget_password_btn) Button forgetPasswordBtn;
    @BindView(R.id.get_verify_code_btn_div) TextView getVerifyCodeBtnDiv;
    @BindView(R.id.login_phone_tag) TextView loginPhoneTag;
    @BindView(R.id.login_password_tag) TextView loginPasswordTag;
    @BindView(R.id.login_password) TextView loginPasswordText;
    @BindView(R.id.login_phone) TextView loginPhoneText;
    @BindView(R.id.login_tips) TextView loginTips;
    @BindView(R.id.login_phone_btn) View loginPhoneBtn;
    @BindView(R.id.login_password_btn) View loginPasswordBtn;

    private Handler handler = new Handler();
    private boolean isPhoneLogin = true;
    private boolean isCountDown = false;
    private int loginType=1;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    protected void initInjector() {
        getActivityComponent().inject(this);
    }

    @Override
    protected LoginContract.Presenter initPresenter() {
        return presenter;
    }
    
    @Override
    protected void setRootView(Bundle savedInstanceState) {
        setContentView(R.layout.activity_login);
    }
    
    
    @OnClick({R.id.get_verify_code_btn, R.id.login_enter_btn, R.id.login_phone_btn, R.id.login_password_btn, R.id.forget_password_btn})
    protected void onViewClicked(View view){
        
        switch (view.getId()) {
            case R.id.login_phone_btn:
                loginType=1;
                changeTag(true);
                break;
            case R.id.login_password_btn:
                loginType=2;
                changeTag(false);
                break;
            case R.id.get_verify_code_btn:
                if(!isCountDown){
                    presenter.onGetVerifyCodeBtnClick(phoneNumberInput.getText().toString());
                }
                break;
            case R.id.login_enter_btn:
                presenter.onLoginBtnClick(
                            phoneNumberInput.getText().toString(),
                            verifyCodeInput.getText().toString(),
                            passwordInput.getText().toString(),
                            loginType);
                break;
            case R.id.forget_password_btn:
                presenter.onForgetBtnClick();
                break;
        }
    }
    
    @Override
    public void startGetVerifyCountDown() {
        isCountDown = true;
        countDown(60);
    }

    @Override
    public void resetCountDown() {
        ALog.d("resetCountDown");
        isCountDown = false;
        getVerifyBtn.setText("获取验证码");
    }

    @Override
    public void updatePasswordText(String text) {
        verifyCodeInput.setText(text);
    }

    private void countDown(final int num){
        if(isCountDown){
            if(num > 0){
                getVerifyBtn.setText(num + "s");
                handler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        countDown(num - 1);
                    }
                }, 1000);
            } else {
                resetCountDown();
            }
        }
    }
    
    private void changeTag(boolean isPhone) {
        if((isPhoneLogin && !isPhone) || (!isPhoneLogin && isPhone)){
            isPhoneLogin = isPhone;
            loginPhoneText.setTextColor(isPhone ? getResources().getColor(R.color.login_tag_focus) : getResources().getColor(R.color.login_tag_un_focus));
            loginPasswordText.setTextColor(!isPhone ? getResources().getColor(R.color.login_tag_focus) : getResources().getColor(R.color.login_tag_un_focus));
            loginPhoneTag.setVisibility(isPhone ? View.VISIBLE : View.INVISIBLE);
            loginPasswordTag.setVisibility(!isPhone ? View.VISIBLE : View.INVISIBLE);
            getVerifyCodeBtnDiv.setVisibility(isPhone ? View.VISIBLE : View.INVISIBLE);
            getVerifyBtn.setVisibility(isPhone ? View.VISIBLE : View.INVISIBLE);
            loginTips.setVisibility(isPhone ? View.VISIBLE : View.INVISIBLE);
            forgetPasswordBtn.setVisibility(!isPhone ? View.VISIBLE : View.INVISIBLE);
            passwordInput.setVisibility(isPhone ? View.INVISIBLE : View.VISIBLE);
            verifyCodeInput.setVisibility(isPhone ? View.VISIBLE : View.INVISIBLE);
        }
    }
}
