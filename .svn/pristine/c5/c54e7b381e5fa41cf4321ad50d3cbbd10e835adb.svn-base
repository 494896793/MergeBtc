package com.bochat.app.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bochat.app.model.bean.GroupMemberEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_group_member".
*/
public class GroupMemberEntityDao extends AbstractDao<GroupMemberEntity, Integer> {

    public static final String TABLENAME = "table_group_member";

    /**
     * Properties of entity GroupMemberEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Group_id = new Property(0, int.class, "group_id", true, "GROUP_ID");
        public final static Property Member_id = new Property(1, int.class, "member_id", false, "MEMBER_ID");
        public final static Property Join_time = new Property(2, String.class, "join_time", false, "JOIN_TIME");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Head_img = new Property(4, String.class, "head_img", false, "HEAD_IMG");
        public final static Property Signature = new Property(5, String.class, "signature", false, "SIGNATURE");
        public final static Property Role = new Property(6, int.class, "role", false, "ROLE");
    };


    public GroupMemberEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupMemberEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_group_member\" (" + //
                "\"GROUP_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: group_id
                "\"MEMBER_ID\" INTEGER NOT NULL ," + // 1: member_id
                "\"JOIN_TIME\" TEXT," + // 2: join_time
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"HEAD_IMG\" TEXT," + // 4: head_img
                "\"SIGNATURE\" TEXT," + // 5: signature
                "\"ROLE\" INTEGER NOT NULL );"); // 6: role
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_group_member\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupMemberEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGroup_id());
        stmt.bindLong(2, entity.getMember_id());
 
        String join_time = entity.getJoin_time();
        if (join_time != null) {
            stmt.bindString(3, join_time);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(5, head_img);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(6, signature);
        }
        stmt.bindLong(7, entity.getRole());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupMemberEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGroup_id());
        stmt.bindLong(2, entity.getMember_id());
 
        String join_time = entity.getJoin_time();
        if (join_time != null) {
            stmt.bindString(3, join_time);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(5, head_img);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(6, signature);
        }
        stmt.bindLong(7, entity.getRole());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public GroupMemberEntity readEntity(Cursor cursor, int offset) {
        GroupMemberEntity entity = new GroupMemberEntity( //
            cursor.getInt(offset + 0), // group_id
            cursor.getInt(offset + 1), // member_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // join_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // head_img
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // signature
            cursor.getInt(offset + 6) // role
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupMemberEntity entity, int offset) {
        entity.setGroup_id(cursor.getInt(offset + 0));
        entity.setMember_id(cursor.getInt(offset + 1));
        entity.setJoin_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHead_img(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSignature(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRole(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(GroupMemberEntity entity, long rowId) {
        return entity.getGroup_id();
    }
    
    @Override
    public Integer getKey(GroupMemberEntity entity) {
        if(entity != null) {
            return entity.getGroup_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
