package com.bochat.app.model.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.bochat.app.model.bean.GroupManagerEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_group_manager".
*/
public class GroupManagerEntityDao extends AbstractDao<GroupManagerEntity, Long> {

    public static final String TABLENAME = "table_group_manager";

    /**
     * Properties of entity GroupManagerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Group_id = new Property(1, long.class, "group_id", false, "GROUP_ID");
        public final static Property Group_creater = new Property(2, String.class, "group_creater", false, "GROUP_CREATER");
        public final static Property Head_img = new Property(3, String.class, "head_img", false, "HEAD_IMG");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property ParentId = new Property(5, long.class, "parentId", false, "PARENT_ID");
    };

    private Query<GroupManagerEntity> groupEntity_ManagersQuery;

    public GroupManagerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupManagerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_group_manager\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 1: group_id
                "\"GROUP_CREATER\" TEXT," + // 2: group_creater
                "\"HEAD_IMG\" TEXT," + // 3: head_img
                "\"NICKNAME\" TEXT," + // 4: nickname
                "\"PARENT_ID\" INTEGER NOT NULL );"); // 5: parentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_group_manager\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupManagerEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getGroup_id());
 
        String group_creater = entity.getGroup_creater();
        if (group_creater != null) {
            stmt.bindString(3, group_creater);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(4, head_img);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
        stmt.bindLong(6, entity.getParentId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupManagerEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getGroup_id());
 
        String group_creater = entity.getGroup_creater();
        if (group_creater != null) {
            stmt.bindString(3, group_creater);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(4, head_img);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
        stmt.bindLong(6, entity.getParentId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GroupManagerEntity readEntity(Cursor cursor, int offset) {
        GroupManagerEntity entity = new GroupManagerEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // group_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // group_creater
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // head_img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.getLong(offset + 5) // parentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupManagerEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGroup_id(cursor.getLong(offset + 1));
        entity.setGroup_creater(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHead_img(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setParentId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupManagerEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupManagerEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "managers" to-many relationship of GroupEntity. */
    public List<GroupManagerEntity> _queryGroupEntity_Managers(long parentId) {
        synchronized (this) {
            if (groupEntity_ManagersQuery == null) {
                QueryBuilder<GroupManagerEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                groupEntity_ManagersQuery = queryBuilder.build();
            }
        }
        Query<GroupManagerEntity> query = groupEntity_ManagersQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

}
