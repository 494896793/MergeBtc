package com.bochat.app.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bochat.app.model.bean.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_user".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "table_user";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property IsInit = new Property(3, int.class, "isInit", false, "IS_INIT");
        public final static Property HeadImg = new Property(4, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Signature = new Property(5, String.class, "signature", false, "SIGNATURE");
        public final static Property Sex = new Property(6, int.class, "sex", false, "SEX");
        public final static Property Age = new Property(7, int.class, "age", false, "AGE");
        public final static Property BochatId = new Property(8, int.class, "bochatId", false, "BOCHAT_ID");
        public final static Property Province = new Property(9, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(10, String.class, "city", false, "CITY");
        public final static Property Token = new Property(11, String.class, "token", false, "TOKEN");
        public final static Property Other_id = new Property(12, String.class, "other_id", false, "OTHER_ID");
        public final static Property InviteCode = new Property(13, String.class, "inviteCode", false, "INVITE_CODE");
        public final static Property Countries = new Property(14, String.class, "countries", false, "COUNTRIES");
        public final static Property Birthday = new Property(15, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Area = new Property(16, String.class, "area", false, "AREA");
        public final static Property Relation_state = new Property(17, String.class, "relation_state", false, "RELATION_STATE");
        public final static Property Black_state = new Property(18, String.class, "black_state", false, "BLACK_STATE");
        public final static Property AuthStatus = new Property(19, String.class, "authStatus", false, "AUTH_STATUS");
        public final static Property IsSetTrade = new Property(20, String.class, "isSetTrade", false, "IS_SET_TRADE");
        public final static Property IsPwd = new Property(21, String.class, "isPwd", false, "IS_PWD");
    };


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ACCOUNT\" TEXT UNIQUE ," + // 1: account
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"IS_INIT\" INTEGER NOT NULL ," + // 3: isInit
                "\"HEAD_IMG\" TEXT," + // 4: headImg
                "\"SIGNATURE\" TEXT," + // 5: signature
                "\"SEX\" INTEGER NOT NULL ," + // 6: sex
                "\"AGE\" INTEGER NOT NULL ," + // 7: age
                "\"BOCHAT_ID\" INTEGER NOT NULL ," + // 8: bochatId
                "\"PROVINCE\" TEXT," + // 9: province
                "\"CITY\" TEXT," + // 10: city
                "\"TOKEN\" TEXT," + // 11: token
                "\"OTHER_ID\" TEXT," + // 12: other_id
                "\"INVITE_CODE\" TEXT," + // 13: inviteCode
                "\"COUNTRIES\" TEXT," + // 14: countries
                "\"BIRTHDAY\" TEXT," + // 15: birthday
                "\"AREA\" TEXT," + // 16: area
                "\"RELATION_STATE\" TEXT," + // 17: relation_state
                "\"BLACK_STATE\" TEXT," + // 18: black_state
                "\"AUTH_STATUS\" TEXT," + // 19: authStatus
                "\"IS_SET_TRADE\" TEXT," + // 20: isSetTrade
                "\"IS_PWD\" TEXT);"); // 21: isPwd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
        stmt.bindLong(4, entity.getIsInit());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(6, signature);
        }
        stmt.bindLong(7, entity.getSex());
        stmt.bindLong(8, entity.getAge());
        stmt.bindLong(9, entity.getBochatId());
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(10, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(12, token);
        }
 
        String other_id = entity.getOther_id();
        if (other_id != null) {
            stmt.bindString(13, other_id);
        }
 
        String inviteCode = entity.getInviteCode();
        if (inviteCode != null) {
            stmt.bindString(14, inviteCode);
        }
 
        String countries = entity.getCountries();
        if (countries != null) {
            stmt.bindString(15, countries);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(16, birthday);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(17, area);
        }
 
        String relation_state = entity.getRelation_state();
        if (relation_state != null) {
            stmt.bindString(18, relation_state);
        }
 
        String black_state = entity.getBlack_state();
        if (black_state != null) {
            stmt.bindString(19, black_state);
        }
 
        String authStatus = entity.getAuthStatus();
        if (authStatus != null) {
            stmt.bindString(20, authStatus);
        }
 
        String isSetTrade = entity.getIsSetTrade();
        if (isSetTrade != null) {
            stmt.bindString(21, isSetTrade);
        }
 
        String isPwd = entity.getIsPwd();
        if (isPwd != null) {
            stmt.bindString(22, isPwd);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
        stmt.bindLong(4, entity.getIsInit());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(6, signature);
        }
        stmt.bindLong(7, entity.getSex());
        stmt.bindLong(8, entity.getAge());
        stmt.bindLong(9, entity.getBochatId());
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(10, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(12, token);
        }
 
        String other_id = entity.getOther_id();
        if (other_id != null) {
            stmt.bindString(13, other_id);
        }
 
        String inviteCode = entity.getInviteCode();
        if (inviteCode != null) {
            stmt.bindString(14, inviteCode);
        }
 
        String countries = entity.getCountries();
        if (countries != null) {
            stmt.bindString(15, countries);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(16, birthday);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(17, area);
        }
 
        String relation_state = entity.getRelation_state();
        if (relation_state != null) {
            stmt.bindString(18, relation_state);
        }
 
        String black_state = entity.getBlack_state();
        if (black_state != null) {
            stmt.bindString(19, black_state);
        }
 
        String authStatus = entity.getAuthStatus();
        if (authStatus != null) {
            stmt.bindString(20, authStatus);
        }
 
        String isSetTrade = entity.getIsSetTrade();
        if (isSetTrade != null) {
            stmt.bindString(21, isSetTrade);
        }
 
        String isPwd = entity.getIsPwd();
        if (isPwd != null) {
            stmt.bindString(22, isPwd);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.getInt(offset + 3), // isInit
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // signature
            cursor.getInt(offset + 6), // sex
            cursor.getInt(offset + 7), // age
            cursor.getInt(offset + 8), // bochatId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // province
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // city
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // token
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // other_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // inviteCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // countries
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // birthday
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // area
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // relation_state
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // black_state
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // authStatus
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // isSetTrade
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // isPwd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsInit(cursor.getInt(offset + 3));
        entity.setHeadImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSignature(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.getInt(offset + 6));
        entity.setAge(cursor.getInt(offset + 7));
        entity.setBochatId(cursor.getInt(offset + 8));
        entity.setProvince(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setToken(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOther_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setInviteCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCountries(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBirthday(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setArea(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRelation_state(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBlack_state(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAuthStatus(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsSetTrade(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsPwd(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
