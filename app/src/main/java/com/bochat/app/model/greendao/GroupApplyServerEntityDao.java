package com.bochat.app.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bochat.app.model.bean.GroupApplyServerEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_group_server_apply".
*/
public class GroupApplyServerEntityDao extends AbstractDao<GroupApplyServerEntity, Long> {

    public static final String TABLENAME = "table_group_server_apply";

    /**
     * Properties of entity GroupApplyServerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", false, "ADDRESS");
        public final static Property ApplyFroUser = new Property(1, int.class, "applyFroUser", false, "APPLY_FRO_USER");
        public final static Property ApplyState = new Property(2, int.class, "applyState", false, "APPLY_STATE");
        public final static Property ApplyText = new Property(3, String.class, "applyText", false, "APPLY_TEXT");
        public final static Property ApplyTime = new Property(4, String.class, "applyTime", false, "APPLY_TIME");
        public final static Property GroupId = new Property(5, int.class, "groupId", false, "GROUP_ID");
        public final static Property HeadImg = new Property(6, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Id = new Property(7, long.class, "id", true, "_id");
        public final static Property Nickname = new Property(8, String.class, "nickname", false, "NICKNAME");
        public final static Property Signature = new Property(9, String.class, "signature", false, "SIGNATURE");
        public final static Property RefuseText = new Property(10, String.class, "refuseText", false, "REFUSE_TEXT");
        public final static Property GroupName = new Property(11, String.class, "groupName", false, "GROUP_NAME");
    };


    public GroupApplyServerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupApplyServerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_group_server_apply\" (" + //
                "\"ADDRESS\" TEXT," + // 0: address
                "\"APPLY_FRO_USER\" INTEGER NOT NULL ," + // 1: applyFroUser
                "\"APPLY_STATE\" INTEGER NOT NULL ," + // 2: applyState
                "\"APPLY_TEXT\" TEXT," + // 3: applyText
                "\"APPLY_TIME\" TEXT," + // 4: applyTime
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 5: groupId
                "\"HEAD_IMG\" TEXT," + // 6: headImg
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 7: id
                "\"NICKNAME\" TEXT," + // 8: nickname
                "\"SIGNATURE\" TEXT," + // 9: signature
                "\"REFUSE_TEXT\" TEXT," + // 10: refuseText
                "\"GROUP_NAME\" TEXT);"); // 11: groupName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_group_server_apply\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupApplyServerEntity entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
        stmt.bindLong(2, entity.getApplyFroUser());
        stmt.bindLong(3, entity.getApplyState());
 
        String applyText = entity.getApplyText();
        if (applyText != null) {
            stmt.bindString(4, applyText);
        }
 
        String applyTime = entity.getApplyTime();
        if (applyTime != null) {
            stmt.bindString(5, applyTime);
        }
        stmt.bindLong(6, entity.getGroupId());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(7, headImg);
        }
        stmt.bindLong(8, entity.getId());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(9, nickname);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(10, signature);
        }
 
        String refuseText = entity.getRefuseText();
        if (refuseText != null) {
            stmt.bindString(11, refuseText);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(12, groupName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupApplyServerEntity entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
        stmt.bindLong(2, entity.getApplyFroUser());
        stmt.bindLong(3, entity.getApplyState());
 
        String applyText = entity.getApplyText();
        if (applyText != null) {
            stmt.bindString(4, applyText);
        }
 
        String applyTime = entity.getApplyTime();
        if (applyTime != null) {
            stmt.bindString(5, applyTime);
        }
        stmt.bindLong(6, entity.getGroupId());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(7, headImg);
        }
        stmt.bindLong(8, entity.getId());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(9, nickname);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(10, signature);
        }
 
        String refuseText = entity.getRefuseText();
        if (refuseText != null) {
            stmt.bindString(11, refuseText);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(12, groupName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 7);
    }    

    @Override
    public GroupApplyServerEntity readEntity(Cursor cursor, int offset) {
        GroupApplyServerEntity entity = new GroupApplyServerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.getInt(offset + 1), // applyFroUser
            cursor.getInt(offset + 2), // applyState
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // applyText
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // applyTime
            cursor.getInt(offset + 5), // groupId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // headImg
            cursor.getLong(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nickname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // signature
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // refuseText
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // groupName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupApplyServerEntity entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setApplyFroUser(cursor.getInt(offset + 1));
        entity.setApplyState(cursor.getInt(offset + 2));
        entity.setApplyText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApplyTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupId(cursor.getInt(offset + 5));
        entity.setHeadImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId(cursor.getLong(offset + 7));
        entity.setNickname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSignature(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRefuseText(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGroupName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupApplyServerEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupApplyServerEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
