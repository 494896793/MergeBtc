package com.bochat.app.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bochat.app.model.bean.UserCurrencyEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_user_currency".
*/
public class UserCurrencyEntityDao extends AbstractDao<UserCurrencyEntity, Long> {

    public static final String TABLENAME = "table_user_currency";

    /**
     * Properties of entity UserCurrencyEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Bid = new Property(0, long.class, "bid", true, "_id");
        public final static Property TotalAmount = new Property(1, String.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property CnyPrice = new Property(2, String.class, "cnyPrice", false, "CNY_PRICE");
        public final static Property BName = new Property(3, String.class, "bName", false, "B_NAME");
        public final static Property BIamge = new Property(4, String.class, "bIamge", false, "B_IAMGE");
    };


    public UserCurrencyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserCurrencyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_user_currency\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: bid
                "\"TOTAL_AMOUNT\" TEXT," + // 1: totalAmount
                "\"CNY_PRICE\" TEXT," + // 2: cnyPrice
                "\"B_NAME\" TEXT," + // 3: bName
                "\"B_IAMGE\" TEXT);"); // 4: bIamge
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_user_currency\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserCurrencyEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBid());
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(2, totalAmount);
        }
 
        String cnyPrice = entity.getCnyPrice();
        if (cnyPrice != null) {
            stmt.bindString(3, cnyPrice);
        }
 
        String bName = entity.getBName();
        if (bName != null) {
            stmt.bindString(4, bName);
        }
 
        String bIamge = entity.getBIamge();
        if (bIamge != null) {
            stmt.bindString(5, bIamge);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserCurrencyEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBid());
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(2, totalAmount);
        }
 
        String cnyPrice = entity.getCnyPrice();
        if (cnyPrice != null) {
            stmt.bindString(3, cnyPrice);
        }
 
        String bName = entity.getBName();
        if (bName != null) {
            stmt.bindString(4, bName);
        }
 
        String bIamge = entity.getBIamge();
        if (bIamge != null) {
            stmt.bindString(5, bIamge);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserCurrencyEntity readEntity(Cursor cursor, int offset) {
        UserCurrencyEntity entity = new UserCurrencyEntity( //
            cursor.getLong(offset + 0), // bid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // totalAmount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cnyPrice
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // bIamge
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserCurrencyEntity entity, int offset) {
        entity.setBid(cursor.getLong(offset + 0));
        entity.setTotalAmount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCnyPrice(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBIamge(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserCurrencyEntity entity, long rowId) {
        entity.setBid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserCurrencyEntity entity) {
        if(entity != null) {
            return entity.getBid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
