package com.bochat.app.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bochat.app.model.bean.GroupApplyEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_group_apply".
*/
public class GroupApplyEntityDao extends AbstractDao<GroupApplyEntity, String> {

    public static final String TABLENAME = "table_group_apply";

    /**
     * Properties of entity GroupApplyEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Proposer_id = new Property(0, String.class, "proposer_id", true, "PROPOSER_ID");
        public final static Property Apply_time = new Property(1, String.class, "apply_time", false, "APPLY_TIME");
        public final static Property Apply_state = new Property(2, String.class, "apply_state", false, "APPLY_STATE");
        public final static Property Apply_text = new Property(3, String.class, "apply_text", false, "APPLY_TEXT");
        public final static Property Apply_from = new Property(4, String.class, "apply_from", false, "APPLY_FROM");
        public final static Property Group_name = new Property(5, String.class, "group_name", false, "GROUP_NAME");
        public final static Property Group_head = new Property(6, String.class, "group_head", false, "GROUP_HEAD");
        public final static Property IsRead = new Property(7, String.class, "isRead", false, "IS_READ");
        public final static Property SourceType = new Property(8, int.class, "SourceType", false, "SOURCE_TYPE");
        public final static Property Extra = new Property(9, String.class, "extra", false, "EXTRA");
        public final static Property Desc = new Property(10, String.class, "desc", false, "DESC");
    };


    public GroupApplyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GroupApplyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_group_apply\" (" + //
                "\"PROPOSER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: proposer_id
                "\"APPLY_TIME\" TEXT," + // 1: apply_time
                "\"APPLY_STATE\" TEXT," + // 2: apply_state
                "\"APPLY_TEXT\" TEXT," + // 3: apply_text
                "\"APPLY_FROM\" TEXT," + // 4: apply_from
                "\"GROUP_NAME\" TEXT," + // 5: group_name
                "\"GROUP_HEAD\" TEXT," + // 6: group_head
                "\"IS_READ\" TEXT," + // 7: isRead
                "\"SOURCE_TYPE\" INTEGER NOT NULL ," + // 8: SourceType
                "\"EXTRA\" TEXT," + // 9: extra
                "\"DESC\" TEXT);"); // 10: desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_group_apply\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupApplyEntity entity) {
        stmt.clearBindings();
 
        String proposer_id = entity.getProposer_id();
        if (proposer_id != null) {
            stmt.bindString(1, proposer_id);
        }
 
        String apply_time = entity.getApply_time();
        if (apply_time != null) {
            stmt.bindString(2, apply_time);
        }
 
        String apply_state = entity.getApply_state();
        if (apply_state != null) {
            stmt.bindString(3, apply_state);
        }
 
        String apply_text = entity.getApply_text();
        if (apply_text != null) {
            stmt.bindString(4, apply_text);
        }
 
        String apply_from = entity.getApply_from();
        if (apply_from != null) {
            stmt.bindString(5, apply_from);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(6, group_name);
        }
 
        String group_head = entity.getGroup_head();
        if (group_head != null) {
            stmt.bindString(7, group_head);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(8, isRead);
        }
        stmt.bindLong(9, entity.getSourceType());
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(10, extra);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(11, desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupApplyEntity entity) {
        stmt.clearBindings();
 
        String proposer_id = entity.getProposer_id();
        if (proposer_id != null) {
            stmt.bindString(1, proposer_id);
        }
 
        String apply_time = entity.getApply_time();
        if (apply_time != null) {
            stmt.bindString(2, apply_time);
        }
 
        String apply_state = entity.getApply_state();
        if (apply_state != null) {
            stmt.bindString(3, apply_state);
        }
 
        String apply_text = entity.getApply_text();
        if (apply_text != null) {
            stmt.bindString(4, apply_text);
        }
 
        String apply_from = entity.getApply_from();
        if (apply_from != null) {
            stmt.bindString(5, apply_from);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(6, group_name);
        }
 
        String group_head = entity.getGroup_head();
        if (group_head != null) {
            stmt.bindString(7, group_head);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(8, isRead);
        }
        stmt.bindLong(9, entity.getSourceType());
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(10, extra);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(11, desc);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GroupApplyEntity readEntity(Cursor cursor, int offset) {
        GroupApplyEntity entity = new GroupApplyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // proposer_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // apply_time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // apply_state
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apply_text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // apply_from
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // group_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // group_head
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isRead
            cursor.getInt(offset + 8), // SourceType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // extra
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupApplyEntity entity, int offset) {
        entity.setProposer_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setApply_time(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApply_state(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApply_text(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApply_from(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroup_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroup_head(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsRead(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSourceType(cursor.getInt(offset + 8));
        entity.setExtra(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDesc(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GroupApplyEntity entity, long rowId) {
        return entity.getProposer_id();
    }
    
    @Override
    public String getKey(GroupApplyEntity entity) {
        if(entity != null) {
            return entity.getProposer_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
