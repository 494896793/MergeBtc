package com.bochat.app.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bochat.app.model.bean.CurrencyDetailEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "table_currency_detail".
*/
public class CurrencyDetailEntityDao extends AbstractDao<CurrencyDetailEntity, Long> {

    public static final String TABLENAME = "table_currency_detail";

    /**
     * Properties of entity CurrencyDetailEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Bid = new Property(0, long.class, "bid", true, "_id");
        public final static Property TotalAmount = new Property(1, String.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property CnyPrice = new Property(2, String.class, "cnyPrice", false, "CNY_PRICE");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property BName = new Property(4, String.class, "bName", false, "B_NAME");
        public final static Property BIamge = new Property(5, String.class, "bIamge", false, "B_IAMGE");
        public final static Property EffectiveTime = new Property(6, String.class, "effectiveTime", false, "EFFECTIVE_TIME");
        public final static Property SubAmount = new Property(7, double.class, "subAmount", false, "SUB_AMOUNT");
        public final static Property BitmallEntrySwitch = new Property(8, String.class, "bitmallEntrySwitch", false, "BITMALL_ENTRY_SWITCH");
    };


    public CurrencyDetailEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CurrencyDetailEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"table_currency_detail\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: bid
                "\"TOTAL_AMOUNT\" TEXT," + // 1: totalAmount
                "\"CNY_PRICE\" TEXT," + // 2: cnyPrice
                "\"ADDRESS\" TEXT," + // 3: address
                "\"B_NAME\" TEXT," + // 4: bName
                "\"B_IAMGE\" TEXT," + // 5: bIamge
                "\"EFFECTIVE_TIME\" TEXT," + // 6: effectiveTime
                "\"SUB_AMOUNT\" REAL NOT NULL ," + // 7: subAmount
                "\"BITMALL_ENTRY_SWITCH\" TEXT);"); // 8: bitmallEntrySwitch
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"table_currency_detail\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CurrencyDetailEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBid());
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(2, totalAmount);
        }
 
        String cnyPrice = entity.getCnyPrice();
        if (cnyPrice != null) {
            stmt.bindString(3, cnyPrice);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String bName = entity.getBName();
        if (bName != null) {
            stmt.bindString(5, bName);
        }
 
        String bIamge = entity.getBIamge();
        if (bIamge != null) {
            stmt.bindString(6, bIamge);
        }
 
        String effectiveTime = entity.getEffectiveTime();
        if (effectiveTime != null) {
            stmt.bindString(7, effectiveTime);
        }
        stmt.bindDouble(8, entity.getSubAmount());
 
        String bitmallEntrySwitch = entity.getBitmallEntrySwitch();
        if (bitmallEntrySwitch != null) {
            stmt.bindString(9, bitmallEntrySwitch);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CurrencyDetailEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBid());
 
        String totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindString(2, totalAmount);
        }
 
        String cnyPrice = entity.getCnyPrice();
        if (cnyPrice != null) {
            stmt.bindString(3, cnyPrice);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String bName = entity.getBName();
        if (bName != null) {
            stmt.bindString(5, bName);
        }
 
        String bIamge = entity.getBIamge();
        if (bIamge != null) {
            stmt.bindString(6, bIamge);
        }
 
        String effectiveTime = entity.getEffectiveTime();
        if (effectiveTime != null) {
            stmt.bindString(7, effectiveTime);
        }
        stmt.bindDouble(8, entity.getSubAmount());
 
        String bitmallEntrySwitch = entity.getBitmallEntrySwitch();
        if (bitmallEntrySwitch != null) {
            stmt.bindString(9, bitmallEntrySwitch);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CurrencyDetailEntity readEntity(Cursor cursor, int offset) {
        CurrencyDetailEntity entity = new CurrencyDetailEntity( //
            cursor.getLong(offset + 0), // bid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // totalAmount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cnyPrice
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bIamge
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // effectiveTime
            cursor.getDouble(offset + 7), // subAmount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // bitmallEntrySwitch
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CurrencyDetailEntity entity, int offset) {
        entity.setBid(cursor.getLong(offset + 0));
        entity.setTotalAmount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCnyPrice(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBIamge(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEffectiveTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSubAmount(cursor.getDouble(offset + 7));
        entity.setBitmallEntrySwitch(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CurrencyDetailEntity entity, long rowId) {
        entity.setBid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CurrencyDetailEntity entity) {
        if(entity != null) {
            return entity.getBid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
